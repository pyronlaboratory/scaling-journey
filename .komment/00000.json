[
  {
    "name": "App.tsx",
    "path": "App.tsx",
    "content": {
      "structured": {
        "description": "An enum for user roles and a tuple type for user activity. It also defines a User type with nested objects and intersection types, as well as a Props type with generics and default values. The code then creates a React functional component, UserActivityReport, that filters and maps users based on criteria and renders their activities in a report format using the JSX syntax.",
        "items": [
          {
            "id": "815cf3ec-9295-0d8d-9d40-b6884999b83d",
            "ancestors": [],
            "description": "Takes a user activity object as input and returns a formatted string representing the activity. The activity is composed of a username, action, and date. The function concatenates these components into a human-readable string with the date converted to a localized string representation.",
            "params": [
              {
                "name": "activity",
                "optional": false,
                "type_name": "UserActivity",
                "description": "Processed into a formatted string."
              }
            ],
            "returns": {
              "type_name": "string",
              "description": "A formatted activity log message. The returned string combines username, action, and date in the specified format."
            },
            "usage": {
              "language": "typescript",
              "code": "formatActivity([\"John\", \"created\", new Date(2022, 5, 12)]);\n",
              "description": ""
            },
            "name": "formatActivity",
            "location": {
              "start": 43,
              "insert": 43,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 4,
            "docLength": null
          },
          {
            "id": "cd7df3c2-f130-2ab3-be4a-93425417fbd5",
            "ancestors": [],
            "description": "Filters and maps a list of users based on age and activity criteria, then renders a report displaying user information, including their name, role, age, address, status, and activities.",
            "params": [
              {
                "name": "obj",
                "optional": false,
                "type_name": "object",
                "description": "Non-optional. It has two properties: `users`, which is an array, and `options`. The `users` property corresponds to a set of user objects, while `options` contains nested properties for filtering users and activities."
              },
              {
                "name": "obj.users",
                "optional": false,
                "type_name": "User[]",
                "description": "Required for rendering user activity reports."
              },
              {
                "name": "obj.minAge",
                "optional": true,
                "type_name": "number",
                "description": "Used to filter users by age.",
                "default_value": "18"
              },
              {
                "name": "obj.options",
                "optional": false,
                "type_name": "{\n    includeInactive = defaultOptions.includeInactive,\n    activityFilter = defaultOptions.activityFilter,\n  } = defaultOptions",
                "description": "Optional, it allows to customize report generation with filtering and excluding inactive users."
              }
            ],
            "returns": {
              "type_name": "JSX.Element",
              "description": "A React component representing a report containing information about multiple users, including their activities. The component consists of a list of user cards with details and a list of activities for each user."
            },
            "usage": {
              "language": "typescript",
              "code": "const users = [\n  {\n    name: 'John Doe',\n    role: 'User',\n    age: 25,\n    active: true,\n    address: { street: '123 Main', city: 'Anytown', country: 'USA' },\n    activities: [{ type: 'read', description: 'Read a book' }, { type: 'run', description: 'Go for a run' }],\n  },\n];\n\n<UserActivityReport users={users} />;\n",
              "description": ""
            },
            "name": "UserActivityReport",
            "location": {
              "start": 48,
              "insert": 48,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 36,
            "docLength": null
          },
          {
            "id": "c5f1e831-b381-4fbd-d14a-aaec84e8e47c",
            "ancestors": [],
            "description": "Renders a user interface with a heading \"User Activity Report\" and passes `users`, `minAge`, and options to a `UserActivityReport` component for rendering. The options include an activity filter that excludes 'logout' actions when calculating the report.",
            "params": [],
            "usage": {
              "language": "typescript",
              "code": "const users = [\n  { id: 1, name: 'John', age: 22 },\n  { id: 2, name: 'Alice', age: 25 },\n  { id: 3, name: 'Bob', age: 17 }\n];\n<App users={users} />;\n",
              "description": ""
            },
            "name": "App",
            "location": {
              "start": 122,
              "insert": 122,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "source.js",
    "path": "source.js",
    "content": {
      "structured": {
        "description": "A function generateUserReport that generates a report on users based on certain conditions. The function filters users by age and activity status, then maps each user object to a new format including name, age, active status, and registration date. The registration date is formatted according to the specified date format using the formatDate function.",
        "items": [
          {
            "id": "75990936-0f25-38b7-2b4e-c5b77019600c",
            "ancestors": [],
            "description": "Generates a report for users based on specified criteria. It filters users by age and activity status, and formats their registration dates according to a user-defined date format. The resulting report includes user name, age, activity status, and formatted registration date.",
            "params": [
              {
                "name": "users",
                "optional": false,
                "type_name": "user[]",
                "description": "An array of user objects."
              },
              {
                "name": "minAge",
                "optional": true,
                "type_name": "number",
                "description": "Used to filter users based on their age.",
                "default_value": "18"
              },
              {
                "name": "options",
                "optional": true,
                "type_name": "object",
                "description": "Optional, which can be used to customize the report generation process.",
                "default_value": "{}"
              }
            ],
            "returns": {
              "type_name": "object",
              "description": "An array of objects with properties name, age, active, and registrationDate. Each object represents a user meeting certain criteria."
            },
            "usage": {
              "language": "javascript",
              "code": "const users = [\n  { name: 'Alice', age: 25, active: true, registrationDate: '2020-01-01' },\n  { name: 'Bob', age: 17, active: false, registrationDate: '2019-06-15' },\n  { name: 'Charlie', age: 30, active: true, registrationDate: '2018-03-20' }\n];\n\nconst report = generateUserReport(users);\n",
              "description": ""
            },
            "name": "generateUserReport",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 24,
            "docLength": null
          },
          {
            "id": "a9f11952-4bff-289c-b540-61a81c751a9b",
            "ancestors": [
              "75990936-0f25-38b7-2b4e-c5b77019600c"
            ],
            "description": "Converts a date into a specified string format. It takes a date and a format as inputs, extracts the day, month, and year from the date, formats them according to the input format, and returns the formatted string.",
            "params": [
              {
                "name": "date",
                "optional": false,
                "type_name": "string",
                "description": "Expected to represent a date."
              },
              {
                "name": "format",
                "optional": false,
                "type_name": "string",
                "description": "Used to define the desired output format."
              }
            ],
            "returns": {
              "type_name": "string",
              "description": "A formatted date in accordance with the specified format. The returned string replaces placeholders 'YYYY', 'MM', and 'DD' with corresponding year, month, and day values, respectively."
            },
            "usage": {
              "language": "javascript",
              "code": "const result = formatDate('2023-07-25', 'YYYY-MM-DD');\n",
              "description": "\nThe result will be: '2023-07-25'"
            },
            "name": "formatDate",
            "location": {
              "start": 4,
              "insert": 4,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 11,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "source.py",
    "path": "source.py",
    "content": {
      "structured": {
        "description": "Classes and functions related to user management and activity reporting. It utilizes the `Enum` class from the built-in `enum` module to define a set of roles for users. The `User` class represents individual users with attributes such as name, age, active status, role, address, and activities. The `generate_user_activity_report` function generates a report of user activities based on given filters, including minimum age and activity types.",
        "items": [
          {
            "id": "c587f9dc-9b3d-3386-8647-a24702e0ffdb",
            "ancestors": [],
            "description": "Defines an enumeration type with three values: `ADMIN`, `USER`, and `GUEST`. Each value is associated with a string label, allowing for descriptive references to user roles within the application. This implementation enables type-safe and readable handling of user role data.",
            "attributes": [
              {
                "name": "ADMIN",
                "type_name": "UserRole",
                "description": "Assigned the value \"Admin\". It is an enumeration member that represents the role of an administrator."
              },
              {
                "name": "USER",
                "type_name": "UserRole",
                "description": "4 characters long, representing a user role with a string value \"User\"."
              },
              {
                "name": "GUEST",
                "type_name": "str",
                "description": "5 characters long, representing a user role with name 'Guest' and value 'Guest'. It is one of three roles defined by this Enum class: Admin, User, Guest."
              }
            ],
            "name": "UserRole",
            "location": {
              "start": 5,
              "insert": 6,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 4,
            "docLength": null
          },
          {
            "id": "6edf12ee-80d6-e080-a140-4a6a493d229c",
            "ancestors": [],
            "description": "Initializes a user object with attributes such as name, age, activity status, role, and address. It also includes a list of activities. This class provides a structure for representing users in an application.",
            "attributes": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Initialized with a given name when creating an instance of the class."
              },
              {
                "name": "age",
                "type_name": "int",
                "description": "Initialized with a given integer value during object creation. It represents the age of a user."
              },
              {
                "name": "active",
                "type_name": "bool",
                "description": "Used to track whether a user's account is currently active or not."
              },
              {
                "name": "role",
                "type_name": "UserRole",
                "description": "Assigned during initialization. It represents the user's role, which could be a predefined set of roles, such as administrator, moderator, or regular user."
              },
              {
                "name": "address",
                "type_name": "Dict[str,str]",
                "description": "Expected to contain a dictionary where the keys are strings and the values are also strings, representing the user's address information."
              },
              {
                "name": "activities",
                "type_name": "List[UserActivity]",
                "description": "Initialized in the constructor with the provided argument. It represents a collection of user activities, each activity being an instance of the UserActivity class."
              }
            ],
            "name": "User",
            "location": {
              "start": 12,
              "insert": 14,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 8,
            "docLength": null
          },
          {
            "id": "d583a358-24e0-51a2-bb41-01df25dd0ab5",
            "ancestors": [
              "6edf12ee-80d6-e080-a140-4a6a493d229c"
            ],
            "description": "Initializes objects with provided parameters: name, age, active status, role, address as a dictionary, and activities as a list. It sets instance variables to these values, allowing for user object creation with specific attributes.",
            "params": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Assigned to an instance variable named `self.name`. It represents the name of the user."
              },
              {
                "name": "age",
                "type_name": "int",
                "description": "Required to initialize an object of the class. It represents a user's age, which must be an integer value."
              },
              {
                "name": "active",
                "type_name": "bool",
                "description": "Used to represent whether the user is active or not."
              },
              {
                "name": "role",
                "type_name": "UserRole",
                "description": "Assigned to an instance variable with the same name. The specific details of this role are not specified, but it appears to be an enumeration or an abstract class that represents different user roles."
              },
              {
                "name": "address",
                "type_name": "Dict[str, str]",
                "description": "Expected to be a dictionary where keys are strings and values are also strings. It represents the user's address."
              },
              {
                "name": "activities",
                "type_name": "List[UserActivity]",
                "description": "Expected to hold a list of user activity objects."
              }
            ],
            "usage": {
              "language": "python",
              "code": "user = User(\"John Doe\", 30, True, UserRole.ADMIN, {\"street\": \"123 Main St\", \"city\": \"Anytown\"}, [UserActivity.HIKING, UserActivity.COOKING])",
              "description": ""
            },
            "name": "__init__",
            "location": {
              "start": 14,
              "insert": 16,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "constructor",
            "length": 7,
            "docLength": null
          },
          {
            "id": "25d399c2-890a-ecb3-1d45-d1b6ce6b2546",
            "ancestors": [],
            "description": "Takes a tuple containing user activity data (username, action, date) and returns a formatted string representing the activity. The date is converted to the format 'YYYY-MM-DD' before being included in the output string.",
            "params": [
              {
                "name": "activity",
                "type_name": "UserActivity",
                "description": "Unpacked into three variables: `username`, `action`, and `date`. This indicates that `activity` is an object with at least three attributes or properties."
              }
            ],
            "returns": {
              "type_name": "str",
              "description": "A formatted string that describes an activity performed by a user. The string includes the username, action, and date of the activity, in the format \"username performed action on YYYY-MM-DD\"."
            },
            "usage": {
              "language": "python",
              "code": "activity = (\"JohnDoe\", \"visited\", datetime.date(2022, 1, 12))\nformatted_string = format_activity(activity)",
              "description": ""
            },
            "name": "format_activity",
            "location": {
              "start": 23,
              "insert": 25,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "8cbbbbc6-8bab-7fb0-8046-3ff293522917",
            "ancestors": [],
            "description": "Generates a list of dictionaries, each representing a user's activity report. The report includes user details, such as name, age, and role, along with their activities. It filters users by minimum age and optionally includes inactive users.",
            "params": [
              {
                "name": "users",
                "type_name": "List[User]",
                "description": "Required to generate the report. It takes in a list of User objects, which are then processed and formatted into a report."
              },
              {
                "name": "min_age",
                "type_name": "int",
                "description": "18 by default. It filters users based on their age, including only those who are at least as old as this minimum age specified.",
                "default_value": "18"
              },
              {
                "name": "options",
                "type_name": "Optional[Dict[str, Optional[Callable[[UserActivity], bool]]]]",
                "description": "Optional by default. It filters users based on the presence of inactive users and activities that match a specified filter.",
                "default_value": "None"
              }
            ],
            "returns": {
              "type_name": "List[Dict[str, str]]",
              "description": "A list of dictionaries containing information about users, including their name, age, activity status, role, address and activities they have done."
            },
            "usage": {
              "language": "python",
              "code": "users = [\n    User(name='Alice', age=25, active=True, role=Role.ADMIN, address={'street': '123 Main St', 'city': 'Anytown', 'country': 'USA'}, activities=[Activity('Run'), Activity('Swim')]),\n    User(name='Bob', age=30, active=False, role=Role.USER, address={'street': '456 Elm St', 'city': 'Othertown', 'country': 'Canada'}, activities=[Activity('Hike')])\n]\n\nreport = generate_user_activity_report(users)\n",
              "description": ""
            },
            "name": "generate_user_activity_report",
            "location": {
              "start": 28,
              "insert": 34,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 25,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "service.java",
    "path": "service.java",
    "content": {
      "structured": {
        "description": "Classes and enums representing user data, user activities, and an address. It also includes a predicate-based filtering mechanism for user activity reports. The main function generates a report that filters out users based on age and activity type, formats their name, age, status, role, and address, and then lists their activities in a specific format.",
        "items": [
          {
            "id": "3d87172d-0e1c-77b7-c443-c41487d90c02",
            "ancestors": [],
            "description": "Represents user activities, comprising username, action taken, and date of occurrence. It provides utility for formatting these activities into human-readable strings. This class plays a crucial role in the UserActivityReport, facilitating the generation of reports on user activities.",
            "name": "UserActivity",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 28,
            "docLength": null
          },
          {
            "id": "3b324675-fa31-649b-c143-64dfe003e685",
            "ancestors": [
              "3d87172d-0e1c-77b7-c443-c41487d90c02"
            ],
            "description": "Returns a string representing the current user's username. The function does not accept any parameters and simply retrieves the value stored in the `username` variable, returning it as a string result.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the current user's username.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity user = new UserActivity(\"Alice\", \"login\", new Date());\nString username = user.getUsername();\n",
              "description": ""
            },
            "name": "getUsername",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "8d08af3a-d138-94aa-cf45-4020a43150fd",
            "ancestors": [
              "3d87172d-0e1c-77b7-c443-c41487d90c02"
            ],
            "description": "Retrieves and returns a string value representing an action. It does not modify any data and simply accesses a previously stored value, indicating a read-only operation. The returned value is assigned to the `action` variable.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the value of the `action` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity userActivity = new UserActivity(\"Alice\", \"login\", new Date());\nString action = userActivity.getAction();\n",
              "description": ""
            },
            "name": "getAction",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "8df95cab-874c-9fb9-bb47-6e5dbb127ae1",
            "ancestors": [
              "3d87172d-0e1c-77b7-c443-c41487d90c02"
            ],
            "description": "Retrieves and returns a `Date` object. The returned object represents a point in time, capturing both date and time information. This method provides access to the stored date value for use elsewhere in the program.",
            "params": [],
            "returns": {
              "type_name": "Date",
              "description": "a `Date` object representing a specific date and time.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Date date = new UserActivity(\"Alice\", \"login\", new Date()).getDate();",
              "description": ""
            },
            "name": "getDate",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "49fb889e-4fc3-f9ba-8643-fdff60c9a2c0",
            "ancestors": [
              "3d87172d-0e1c-77b7-c443-c41487d90c02"
            ],
            "description": "Concatenates user information with a date string, using a specified format for the date. It returns a formatted string containing the username, action performed, and date. The function utilizes the `SimpleDateFormat` class to achieve the desired formatting of the date.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string describing an event, including date.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity activity = new UserActivity(\"Alice\", \"login\", new Date(1672531200000L));\nSystem.out.println(activity.format());",
              "description": ""
            },
            "name": "format",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "f51efb5f-bc1f-83aa-0544-3ea9b1122a99",
            "ancestors": [],
            "description": "Represents a user entity with attributes such as name, age, active status, role, address, and activities. It provides methods to retrieve these attributes and has an inner Address class for storing the user's address details.",
            "name": "User",
            "location": {
              "start": 41,
              "insert": 41,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 70,
            "docLength": null
          },
          {
            "id": "ad8a907a-fa5a-3b8a-b845-492aa936da42",
            "ancestors": [
              "f51efb5f-bc1f-83aa-0544-3ea9b1122a99"
            ],
            "description": "Returns a string value representing the object's name property. This method is likely part of a class that encapsulates an entity with a unique identifier, such as a person or a product, and provides read-only access to its name attribute.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the current value of the `name` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 25, true, UserRole.ADMIN, new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\nSystem.out.println(user.getName());",
              "description": ""
            },
            "name": "getName",
            "location": {
              "start": 58,
              "insert": 58,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "e4fe6560-892b-79a5-9748-ef0033713580",
            "ancestors": [
              "f51efb5f-bc1f-83aa-0544-3ea9b1122a99"
            ],
            "description": "Returns an integer value representing the age. The function does not take any parameters and simply retrieves the stored age value, which is presumably set elsewhere in the class or object. This method provides a way to access the age information.",
            "params": [],
            "returns": {
              "type_name": "integer",
              "description": "an integer value representing the object's age.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 25, true, UserRole.ADMIN, new Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\nSystem.out.println(user.getAge());",
              "description": ""
            },
            "name": "getAge",
            "location": {
              "start": 62,
              "insert": 62,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "042a6b27-ae9c-bca6-6b4d-5944ff6ca456",
            "ancestors": [
              "f51efb5f-bc1f-83aa-0544-3ea9b1122a99"
            ],
            "description": "Returns a boolean value indicating whether an object is currently active or not. It simply retrieves and returns the value of the `active` variable. This allows external code to query the state of the object's activity.",
            "params": [],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value representing the current state of the `active` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 25, true, UserRole.USER, new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\nSystem.out.println(user.isActive());",
              "description": ""
            },
            "name": "isActive",
            "location": {
              "start": 66,
              "insert": 66,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9a278f8d-afc6-76b2-de4f-e7edaac980ee",
            "ancestors": [
              "f51efb5f-bc1f-83aa-0544-3ea9b1122a99"
            ],
            "description": "Returns a `UserRole` object representing the current user's role. It simply retrieves and provides access to the pre-set `role` variable without performing any computations or operations on it. The returned `UserRole` object can be used by other parts of the program.",
            "params": [],
            "returns": {
              "type_name": "UserRole",
              "description": "an instance of `UserRole` class.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserRole adminRole = users.get(0).getRole();",
              "description": ""
            },
            "name": "getRole",
            "location": {
              "start": 70,
              "insert": 70,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "cb7a0c92-5a1a-5891-6342-76f35f34c0f1",
            "ancestors": [
              "f51efb5f-bc1f-83aa-0544-3ea9b1122a99"
            ],
            "description": "Returns an instance of the `Address` class. This method simply retrieves and provides access to the existing `address` object, allowing other parts of the program to utilize its contents. The returned value is a reference to the internal `address` state.",
            "params": [],
            "returns": {
              "type_name": "Address",
              "description": "an instance of `Address` class.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"Alice\", 25, true, UserRole.ADMIN, \n                    new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\nAddress address = user.getAddress();\nSystem.out.println(address.getStreet());",
              "description": ""
            },
            "name": "getAddress",
            "location": {
              "start": 74,
              "insert": 74,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "d9b9b1a5-c56b-f3a8-0149-45d5ee3e47e8",
            "ancestors": [
              "f51efb5f-bc1f-83aa-0544-3ea9b1122a99"
            ],
            "description": "Retrieves a list of user activities and returns it. The list is stored as an instance variable named `activities`. This function does not perform any operation on the data, but simply provides access to the pre-existing collection of activities.",
            "params": [],
            "returns": {
              "type_name": "List",
              "description": "a list of user activities.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 25, true, UserRole.ADMIN,\n        new Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\n\nList<UserActivity> activities = user.getActivities();\nactivities.add(new UserActivity(\"John\", \"login\", new Date(1672531200000L)));\nactivities.add(new UserActivity(\"John\", \"purchase\", new Date(1676419200000L)));\n\n// Do something with the list of activities",
              "description": ""
            },
            "name": "getActivities",
            "location": {
              "start": 78,
              "insert": 78,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "80abd3cb-c809-de89-f54c-a6dfe571560b",
            "ancestors": [
              "f51efb5f-bc1f-83aa-0544-3ea9b1122a99"
            ],
            "description": "Represents an address with three properties: street, city, and country. It provides a constructor to initialize these properties and getter methods to retrieve them. The class also overrides the toString method to provide a string representation of the address.",
            "name": "Address",
            "location": {
              "start": 82,
              "insert": 82,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 28,
            "docLength": null
          },
          {
            "id": "0ffbdd9c-a212-b38d-644e-1f6fd23e3923",
            "ancestors": [
              "f51efb5f-bc1f-83aa-0544-3ea9b1122a99",
              "80abd3cb-c809-de89-f54c-a6dfe571560b"
            ],
            "description": "Retrieves the value of a variable named `street`, returning it as a string. This suggests that the object or class containing this method has an attribute for storing and retrieving street information. The returned value is accessible to whoever calls this method.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string value representing the street address.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new Address(\"123 Main St\", \"Metropolis\", \"USA\");\nString street = address.getStreet();\nSystem.out.println(street); // prints: 123 Main St",
              "description": ""
            },
            "name": "getStreet",
            "location": {
              "start": 93,
              "insert": 93,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "d8c9768a-ef66-f298-6d43-77e2adbf38b5",
            "ancestors": [
              "f51efb5f-bc1f-83aa-0544-3ea9b1122a99",
              "80abd3cb-c809-de89-f54c-a6dfe571560b"
            ],
            "description": "Retrieves and returns a string value representing the current city. This method appears to be a getter, providing read-only access to the `city` variable. It does not modify or manipulate the value in any way, simply returning it as is.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the value of the `city` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new Address(\"123 Main St\", \"Metropolis\", \"USA\");\nString city = address.getCity();\n",
              "description": ""
            },
            "name": "getCity",
            "location": {
              "start": 97,
              "insert": 97,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "982da78a-a916-8386-734c-f29bf311e9ce",
            "ancestors": [
              "f51efb5f-bc1f-83aa-0544-3ea9b1122a99",
              "80abd3cb-c809-de89-f54c-a6dfe571560b"
            ],
            "description": "Retrieves and returns the value of a variable named `country`, which is likely an attribute or property of the object it belongs to, providing access to its current value.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the country's name.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new Address(\"123 Main St\", \"Metropolis\", \"USA\");\nString country = address.getCountry();\n",
              "description": ""
            },
            "name": "getCountry",
            "location": {
              "start": 101,
              "insert": 101,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "633235d2-1e04-ac8c-ed46-b29dd5c04044",
            "ancestors": [
              "f51efb5f-bc1f-83aa-0544-3ea9b1122a99",
              "80abd3cb-c809-de89-f54c-a6dfe571560b"
            ],
            "description": "Concatenates three strings: `street`, `city`, and `country`, separated by commas, to form a single string representation of an object. This method overrides the default `toString` implementation provided by Java's Object class. The resulting string is returned as the output.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string concatenation of street, city, and country.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new Address(\"123 Main St\", \"Metropolis\", \"USA\");\nSystem.out.println(address.toString()); // Output: 123 Main St, Metropolis, USA",
              "description": ""
            },
            "name": "toString",
            "location": {
              "start": 105,
              "insert": 105,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "0143f74f-d252-7580-5840-3a0904575ef8",
            "ancestors": [],
            "description": "Generates a formatted report of user activities based on a list of users, minimum age, and activity filter. It collects user data and formats it into a string representation of the user's name, age, status, role, address, and a list of their activities.",
            "name": "UserActivityReport",
            "location": {
              "start": 112,
              "insert": 112,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 55,
            "docLength": null
          },
          {
            "id": "44686d28-095e-8f92-cc46-ca3b11a8961c",
            "ancestors": [
              "0143f74f-d252-7580-5840-3a0904575ef8"
            ],
            "description": "Generates a list of user activity reports based on input parameters: a list of users, minimum age, inclusion of inactive users, and an activity filter predicate. It filters and formats activities for each user meeting the conditions, then collects the results into a list.",
            "params": [
              {
                "name": "users",
                "type_name": "List<User>",
                "description": "collection of users whose activity reports are to be generated based on certain criteria.\n\nStream of User objects containing age and activity information for each user.",
                "complex_type": true
              },
              {
                "name": "minAge",
                "type_name": "int",
                "description": "minimum age requirement for users to be included in the generated report.",
                "complex_type": false
              },
              {
                "name": "includeInactive",
                "type_name": "boolean",
                "description": "option to include inactive users in the report, allowing for filtering based on user activity status.",
                "complex_type": false
              },
              {
                "name": "activityFilter",
                "type_name": "Predicate<UserActivity>",
                "description": "predicate used to filter out user activities that do not match its condition when collecting and formatting user activity reports.\n\n",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ListString",
              "description": "a list of user reports.\n\nThe output is a list of strings representing user activity reports. Each string in the list corresponds to an individual user's report and contains information about their activities that match the provided filter criteria.",
              "complex_type": true
            },
            "name": "generateUserActivityReport",
            "location": {
              "start": 114,
              "insert": 114,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "d49a6917-cf0b-4c96-1740-c81fc8fe59db",
            "ancestors": [
              "0143f74f-d252-7580-5840-3a0904575ef8"
            ],
            "description": "Constructs a string representation of a user's report by appending their name, age, status, role, and address to a StringBuilder. It then iterates over a list of activities and appends each one to the report with indentation. The result is returned as a string.",
            "params": [
              {
                "name": "user",
                "type_name": "User",
                "description": "user whose report is being formatted, providing information such as name, age, status, role, and address to be included in the report.\n\nDeconstructs `user`: Yes\nProperties: \n- Name \n- Age \n- Status (Active or Inactive)\n- Role \n- Address",
                "complex_type": true
              },
              {
                "name": "activities",
                "type_name": "List<String>",
                "description": "collection of strings that are appended to the report after the user's information, with each activity preceded by \" - \".\n\nIterates over each activity, and appends its string representation to the StringBuilder. The activities are separated by lines with leading hyphens.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "string",
              "description": "a formatted string describing a user's details and their activities.\n\nThe returned string is formatted as a report for a user, consisting of several lines. Each line represents a specific attribute of the user such as name, age, status, role, address and activities. The activities are listed with dashes in front of each activity description.",
              "complex_type": true
            },
            "name": "formatUserReport",
            "location": {
              "start": 132,
              "insert": 132,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "ff66cb2b-8f8e-368a-8741-c9cff81a6a17",
            "ancestors": [
              "0143f74f-d252-7580-5840-3a0904575ef8"
            ],
            "description": "Aggregates user activities and generates a report for users who are at least 18 years old, have logged in, and performed an activity other than logout. The report includes information about each user's name, age, and activity history.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "command-line arguments passed to the Java program when it is executed.\n\nThe type of `args` is an array of `String`, and its length is not specified. Each element in the array represents a command-line argument passed to the program.",
                "complex_type": true
              }
            ],
            "name": "main",
            "location": {
              "start": 144,
              "insert": 144,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          }
        ]
      }
    }
  }
]