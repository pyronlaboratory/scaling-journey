[
  {
    "name": "App.tsx",
    "path": "App.tsx",
    "content": {
      "structured": {
        "description": "Reusable components and utility functions to generate a user activity report in a React application. The report displays information about users' activities, including their roles, ages, addresses, and a list of activities they performed. It utilizes TypeScript's type system to ensure strong typing and prevent errors at compile-time.",
        "items": [
          {
            "id": "8e5ce5a4-f2c5-ceb5-3144-e6eb992afdeb",
            "ancestors": [],
            "description": "Takes a user activity as input, consisting of a username, action, and date. It returns a formatted string describing the activity, including the username, action, and date in a standardized format using the `toLocaleDateString()` method.",
            "params": [
              {
                "name": "activity",
                "optional": false,
                "type_name": "UserActivity",
                "description": "3 elements long."
              }
            ],
            "returns": {
              "type_name": "string",
              "description": "A formatted text describing an activity performed by a user, including their username, action taken, and date of performance in the format of a localized date string."
            },
            "usage": {
              "language": "typescript",
              "code": "const userActivity = ['john', 'logged in', new Date()];\nformatActivity(userActivity);",
              "description": ""
            },
            "name": "formatActivity",
            "location": {
              "start": 43,
              "insert": 43,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 4,
            "docLength": null
          },
          {
            "id": "48b832e9-3a5f-25a1-b442-a47bac147498",
            "ancestors": [],
            "description": "Generates a report showing user activities, filtered by age and activity status. It takes props for users, minimum age, and options to include inactive users and filter activities. The report displays each user's information and their corresponding activities.",
            "params": [
              {
                "name": "obj",
                "optional": false,
                "type_name": "object",
                "description": "Non-optional. It contains two properties: `users` with type `Props` and `options`, which itself is an object with optional properties `includeInactive` and `activityFilter`."
              },
              {
                "name": "obj.users",
                "optional": false,
                "type_name": "UserActivityReportProps['users']",
                "description": "Required for filtering and mapping users."
              },
              {
                "name": "obj.minAge",
                "optional": true,
                "type_name": "number",
                "description": "Used to filter users based on their age.",
                "default_value": "18"
              },
              {
                "name": "obj.options",
                "optional": false,
                "type_name": "{\n    includeInactive = defaultOptions.includeInactive,\n    activityFilter = defaultOptions.activityFilter,\n  } = defaultOptions",
                "description": "Optional with default values, which provides flexibility to customize filtering and activity display."
              }
            ],
            "returns": {
              "type_name": "JSX.Element",
              "description": "A virtual DOM node representing a user activity report. The report includes information about each user such as their name, role, age, address and activities performed, with an indication of whether they are active or inactive."
            },
            "usage": {
              "language": "typescript",
              "code": "const users = [\n  { id: 1, name: 'John Doe', age: 25, active: true, activities: ['run', 'bike'] },\n  { id: 2, name: 'Jane Smith', age: 30, active: false, activities: ['swim', 'yoga'] }\n];\nconst report = <UserActivityReport users={users} />;\n",
              "description": ""
            },
            "name": "UserActivityReport",
            "location": {
              "start": 48,
              "insert": 48,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 36,
            "docLength": null
          },
          {
            "id": "f44e6cca-da39-2e85-4744-bf8a9fa6a555",
            "ancestors": [],
            "description": "Renders a user activity report with a title and passes an array of users and minimum age as props to a child component. It also filters out logout actions from the report, including inactive users if requested.",
            "params": [],
            "usage": {
              "language": "typescript",
              "code": "const users = [{name: 'John', age: 25}, {name: 'Alice', age: 30}];\n\n<App users={users} minAge={18} />;\n",
              "description": "\nThis code defines a set of users and then renders the User Activity Report with those users."
            },
            "name": "App",
            "location": {
              "start": 122,
              "insert": 122,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "source.js",
    "path": "source.js",
    "content": {
      "structured": {
        "description": "A function `generateUserReport` that filters and transforms user data based on provided options. It uses JavaScript's built-in date manipulation capabilities to format registration dates according to the specified format. The function returns an array of objects containing user information, age, activity status, and formatted registration dates.",
        "items": [
          {
            "id": "c196f2c9-a5b5-f897-364f-63b4bbc635bb",
            "ancestors": [],
            "description": "Generates a report for users based on their age and activity status. It filters users who are at least a certain minimum age (defaulting to 18) and either active or not inactive, as specified by the options. The report includes user name, age, activity status, and registration date.",
            "params": [
              {
                "name": "users",
                "optional": false,
                "type_name": "object",
                "description": "An array of user data."
              },
              {
                "name": "minAge",
                "optional": true,
                "type_name": "number",
                "description": "Used to filter users based on their age.",
                "default_value": "18"
              },
              {
                "name": "options",
                "optional": true,
                "type_name": "object",
                "description": "Used to specify additional settings.",
                "default_value": "{}"
              }
            ],
            "returns": {
              "type_name": "object[]",
              "description": "An array of objects containing user information such as name, age, activity status, and registration date in a specified format."
            },
            "usage": {
              "language": "javascript",
              "code": "let users = [\n  { name: \"John\", age: 20, active: true, registrationDate: '2022-01-10' },\n  { name: \"Alice\", age: 19, active: false, registrationDate: '2021-09-15' }\n];\n\nlet report = generateUserReport(users);\n\n",
              "description": ""
            },
            "name": "generateUserReport",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 24,
            "docLength": null
          },
          {
            "id": "105f522a-9083-76a5-df44-1b733cb4d5c9",
            "ancestors": [
              "c196f2c9-a5b5-f897-364f-63b4bbc635bb"
            ],
            "description": "Takes a date and a format string as input, and returns a formatted date string based on the provided format. It extracts the year, month, and day from the input date and pads single-digit values with zeros before replacing placeholders in the format string.",
            "params": [
              {
                "name": "date",
                "optional": false,
                "type_name": "number",
                "description": "Unix timestamp."
              },
              {
                "name": "format",
                "optional": false,
                "type_name": "string",
                "description": "Used for formatting output."
              }
            ],
            "returns": {
              "type_name": "string",
              "description": "Formatted date according to the specified format, replacing placeholders 'YYYY', 'MM', and 'DD' with year, month, and day respectively, if necessary adding leading zero for single-digit values."
            },
            "usage": {
              "language": "javascript",
              "code": "let date = '2022-02-10';\nlet formattedDate = formatDate(date, 'DD/MM/YYYY');\n",
              "description": ""
            },
            "name": "formatDate",
            "location": {
              "start": 4,
              "insert": 4,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 11,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "source.py",
    "path": "source.py",
    "content": {
      "structured": {
        "description": "A set of classes and functions to represent users with their attributes and activities. The `User` class has properties for name, age, activity status, role, address, and a list of user activities. The `format_activity` function formats a user activity into a string. The `generate_user_activity_report` function generates a report of filtered user activities based on minimum age, include inactive users, and an activity filter.",
        "items": [
          {
            "id": "3e674f38-430d-25a4-9e44-c1856756fb3a",
            "ancestors": [],
            "description": "Defines an enumeration for user roles, which can be either `ADMIN`, `USER`, or `GUEST`. This allows developers to assign a role to a user and easily distinguish between different types of users based on their privileges and access levels.",
            "attributes": [
              {
                "name": "ADMIN",
                "type_name": "UserRole",
                "description": "Equal to \"Admin\"."
              },
              {
                "name": "USER",
                "type_name": "UserRole",
                "description": "Assigned the string value `\"User\"`. It represents a user role with limited permissions."
              },
              {
                "name": "GUEST",
                "type_name": "UserRole",
                "description": "Assigned a value of \"Guest\". It represents a guest user role with limited access or privileges."
              }
            ],
            "name": "UserRole",
            "location": {
              "start": 5,
              "insert": 6,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 4,
            "docLength": null
          },
          {
            "id": "7e8c7758-2596-97b3-8343-c6823366a0eb",
            "ancestors": [],
            "description": "Defines a user entity with attributes: name, age, activity status, role, and address. It also maintains a list of user activities. This class provides a way to represent users with varying roles and activities, facilitating storage and retrieval of user information.",
            "attributes": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Initialized with a given string value in the `__init__` method. It represents the user's name."
              },
              {
                "name": "age",
                "type_name": "int",
                "description": "Initialized during object creation with a specified integer value. It represents the age of the user."
              },
              {
                "name": "active",
                "type_name": "bool",
                "description": "Initialized with a given boolean value during object creation, indicating whether the user is active or not."
              },
              {
                "name": "role",
                "type_name": "UserRole",
                "description": "Initialized with a value provided to the class constructor. It represents the role played by the user, likely categorizing them into specific groups or positions within a system."
              },
              {
                "name": "address",
                "type_name": "Dict[str,str]",
                "description": "Expected to contain string-value pairs representing the user's address, where keys are likely street name, city, state, country, or similar details."
              },
              {
                "name": "activities",
                "type_name": "List[UserActivity]",
                "description": "Initialized with a list of user activities when the `User` object is created. It represents a collection of activities performed by the user."
              }
            ],
            "name": "User",
            "location": {
              "start": 12,
              "insert": 14,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 8,
            "docLength": null
          },
          {
            "id": "73f002f8-6476-239f-8f47-75433a98b01e",
            "ancestors": [
              "7e8c7758-2596-97b3-8343-c6823366a0eb"
            ],
            "description": "Initializes a user object by setting its properties: name, age, active status, role, address (a dictionary), and activities (a list).",
            "params": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Assigned to the instance variable `self.name`. It is expected to hold a string value representing the user's name."
              },
              {
                "name": "age",
                "type_name": "int",
                "description": "Required to create an instance of this class, indicating the user's age."
              },
              {
                "name": "active",
                "type_name": "bool",
                "description": "Assigned to an instance variable of the same name. It represents a boolean value indicating whether the user is active or not."
              },
              {
                "name": "role",
                "type_name": "UserRole",
                "description": "Assigned to an instance variable named `self.role`."
              },
              {
                "name": "address",
                "type_name": "Dict[str, str]",
                "description": "Expected to be a dictionary where keys are strings and values are also strings. This suggests that an individual's address can have multiple attributes with corresponding values."
              },
              {
                "name": "activities",
                "type_name": "List[UserActivity]",
                "description": "Used to initialize an instance variable with a list of user activities."
              }
            ],
            "usage": {
              "language": "python",
              "code": "user = User(\"John\", 30, True, UserRole.ADMIN, {\"street\": \"123 Main St\", \"city\": \"Anytown\"}, [\"Running\", \"Cycling\"])\n",
              "description": ""
            },
            "name": "__init__",
            "location": {
              "start": 14,
              "insert": 16,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "constructor",
            "length": 7,
            "docLength": null
          },
          {
            "id": "faf88784-3d1c-e196-7841-4dde091b0e2d",
            "ancestors": [],
            "description": "Formats a user activity into a string, taking a tuple-like object (`activity`) as input, which contains username, action, and date. It returns a string describing the activity in the format \"username performed action on YYYY-MM-DD\".",
            "params": [
              {
                "name": "activity",
                "type_name": "UserActivity",
                "description": "Expected to be a tuple or list that contains exactly three elements: username, action, and date."
              }
            ],
            "returns": {
              "type_name": "str",
              "description": "A formatted string that represents an activity, indicating the username who performed the action and when it was done."
            },
            "usage": {
              "language": "python",
              "code": "format_activity((\"John\", \"logged in\", datetime.date(2022, 10, 15)))",
              "description": ""
            },
            "name": "format_activity",
            "location": {
              "start": 23,
              "insert": 25,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "2ca8db29-0e4f-d9b3-5b44-c77dee5070e9",
            "ancestors": [],
            "description": "Generates a report summarizing user activities, filtering by age and activity status. It takes a list of users, an optional minimum age, and an optional dictionary of filter options (including inactive users and custom activity filters).",
            "params": [
              {
                "name": "users",
                "type_name": "List[User]",
                "description": "Expected to be a list of User objects, where each User object has attributes such as name, age, active status, role, and address."
              },
              {
                "name": "min_age",
                "type_name": "int",
                "description": "18 by default. It filters out users whose age is less than this minimum age.",
                "default_value": "18"
              },
              {
                "name": "options",
                "type_name": "Optional[Dict[str, Optional[Callable[[UserActivity], bool]]]]",
                "description": "Optional by default. It allows filtering users based on two options: whether to include inactive users and a custom activity filter.",
                "default_value": "None"
              }
            ],
            "returns": {
              "type_name": "List[Dict[str, str]]",
              "description": "A list of dictionaries. Each dictionary represents a user and contains their name, age, whether they are active or not, role, address, and a list of activities that match the provided filter criteria."
            },
            "usage": {
              "language": "python",
              "code": "users = [User('John', 25, True, Role.ADMIN), User('Jane', 30, False, Role.USER)]\ngenerate_user_activity_report(users)",
              "description": ""
            },
            "name": "generate_user_activity_report",
            "location": {
              "start": 28,
              "insert": 34,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 25,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "service.java",
    "path": "service.java",
    "content": {
      "structured": {
        "description": "Classes and interfaces that enable tracking user activities and generating reports based on certain filters. The `UserActivityReport` class provides a method `generateUserActivityReport` that takes a list of users, minimum age, inclusion status of inactive users, and an activity filter as inputs and returns a report of user activities that meet the given criteria. The report includes information about each user's name, age, status, role, address, and performed actions.",
        "items": [
          {
            "id": "decdc200-d207-ce90-4d41-faff7286514e",
            "ancestors": [],
            "description": "Represents user activities with details such as username, action performed, and date. It provides methods to retrieve these details and format the activity into a human-readable string. The class encapsulates information about a single user activity event.",
            "name": "UserActivity",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 28,
            "docLength": null
          },
          {
            "id": "b2f50492-40be-78a9-f84a-64a684822bcc",
            "ancestors": [
              "decdc200-d207-ce90-4d41-faff7286514e"
            ],
            "description": "Returns a string representing the username. It retrieves and provides access to the value stored in the `username` variable, allowing it to be used elsewhere in the code. The function does not modify the `username` value.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the username.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity ua = new UserActivity(\"John\", \"login\", new Date(1672531200000L));\nSystem.out.println(ua.getUsername());",
              "description": ""
            },
            "name": "getUsername",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "47a986b1-c919-84b1-7c45-03be6bf0c921",
            "ancestors": [
              "decdc200-d207-ce90-4d41-faff7286514e"
            ],
            "description": "Returns a string value representing an action. It simply retrieves and returns the stored `action` variable, providing access to its contents for external use. This functionality allows other parts of the program to utilize the action information without modifying the original source.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string value of `action`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity activity = new UserActivity(\"Alice\", \"purchase\", new Date(1676419200000L));\nString action = activity.getAction();\n",
              "description": "\n\nThe code creates a new UserActivity object and retrieves the action from it."
            },
            "name": "getAction",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4507cf35-d081-1eb7-6f48-9b61ad9189fd",
            "ancestors": [
              "decdc200-d207-ce90-4d41-faff7286514e"
            ],
            "description": "Retrieves and returns a `Date` object. It simply accesses and provides the value stored in the `date` variable, without performing any modifications or calculations on it. The returned `Date` object represents a point in time.",
            "params": [],
            "returns": {
              "type_name": "Date",
              "description": "a `Date`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity activity = new UserActivity(\"Alice\", \"login\", new Date());\nDate date = activity.getDate();\n",
              "description": ""
            },
            "name": "getDate",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "718ad68b-d131-9c88-264c-9d98e9beb658",
            "ancestors": [
              "decdc200-d207-ce90-4d41-faff7286514e"
            ],
            "description": "Generates a string describing an event, combining `username`, `action`, and date (`yyyy-MM-dd`) formats using `SimpleDateFormat`. The resulting string represents an activity performed by the specified username on the given date.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string formatted as \"username performed action on yyy-MM-dd\".",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity userActivity = new UserActivity(\"John\", \"login\", new Date());\nSystem.out.println(userActivity.format());",
              "description": ""
            },
            "name": "format",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "b1360724-9b76-e1a4-d542-1c9256b5a088",
            "ancestors": [],
            "description": "Represents a user entity with attributes for name, age, active status, role, address, and activities. It provides getter methods to access these attributes and allows creation of users with associated data. The class also includes an inner Address class to represent a user's location.",
            "name": "User",
            "location": {
              "start": 41,
              "insert": 41,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 70,
            "docLength": null
          },
          {
            "id": "fdee17de-93cc-6d94-4c46-b9073160efdb",
            "ancestors": [
              "b1360724-9b76-e1a4-d542-1c9256b5a088"
            ],
            "description": "Returns a string representing an object's name. It simply retrieves and provides the value of the `name` variable without any processing or modification. The returned string is used to access the object's name for further use or display.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the object's name attribute.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 25, true, UserRole.ADMIN, \n                  new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\nString name = user.getName();\n",
              "description": "\n\nNote: The actual output of the `getName` method will be `\"John\"`."
            },
            "name": "getName",
            "location": {
              "start": 58,
              "insert": 58,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9923ab0d-108f-9d8d-2047-68c13d7124e6",
            "ancestors": [
              "b1360724-9b76-e1a4-d542-1c9256b5a088"
            ],
            "description": "Returns an integer value representing a person's age. The function does not take any input parameters and simply retrieves the stored `age` value, which is presumably an instance variable or field.",
            "params": [],
            "returns": {
              "type_name": "integer",
              "description": "an integer value representing the age of an entity.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 30, true, UserRole.ADMIN, new Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\nint age = user.getAge();",
              "description": ""
            },
            "name": "getAge",
            "location": {
              "start": 62,
              "insert": 62,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "3335185f-e852-31be-2b44-278f7bd4087d",
            "ancestors": [
              "b1360724-9b76-e1a4-d542-1c9256b5a088"
            ],
            "description": "Returns a boolean value indicating whether the related object is currently active or not. It simply retrieves the current state of the `active` variable and reflects it back to the caller. The returned value determines if the object is functioning properly.",
            "params": [],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether an object's state is active or not.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 30, true, UserRole.ADMIN,\n        new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), aliceActivities);\nSystem.out.println(user.isActive());\n",
              "description": ""
            },
            "name": "isActive",
            "location": {
              "start": 66,
              "insert": 66,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "c19d1cea-7be8-6fba-3c43-8f8fd3605f23",
            "ancestors": [
              "b1360724-9b76-e1a4-d542-1c9256b5a088"
            ],
            "description": "Returns an instance of type `UserRole`. It appears to provide access to a predefined role object, allowing for retrieval or manipulation of the associated user role information. The returned object likely contains details about the user's role or privileges.",
            "params": [],
            "returns": {
              "type_name": "UserRole",
              "description": "an instance of the `UserRole` class.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserRole role = new User(\"Bob\", 17, false, UserRole.USER,\n                new User.Address(\"456 Elm St\", \"Gotham\", \"USA\"), bobActivities).getRole();\nSystem.out.println(role);",
              "description": ""
            },
            "name": "getRole",
            "location": {
              "start": 70,
              "insert": 70,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "7bc16034-1c47-d999-674c-32c3288747ae",
            "ancestors": [
              "b1360724-9b76-e1a4-d542-1c9256b5a088"
            ],
            "description": "Retrieves an object representing an address and returns it. This method provides access to the current address, allowing for its retrieval or usage elsewhere in the program. The returned address can be used for various purposes such as displaying information or processing geographic data.",
            "params": [],
            "returns": {
              "type_name": "Address",
              "description": "an `Address` object.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"Alice\", 25, true, UserRole.ADMIN, \n    new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), aliceActivities);\nAddress address = user.getAddress();\nSystem.out.println(address.getCountry());",
              "description": ""
            },
            "name": "getAddress",
            "location": {
              "start": 74,
              "insert": 74,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "56dcf87e-31a8-69b7-e545-ad8936992f8a",
            "ancestors": [
              "b1360724-9b76-e1a4-d542-1c9256b5a088"
            ],
            "description": "Returns a list of user activities. It does not perform any computations or interactions with external systems, instead simply retrieving and providing access to an existing collection of activities. This allows for easy retrieval and utilization of the activities data elsewhere.",
            "params": [],
            "returns": {
              "type_name": "List",
              "description": "a list of user activities.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 25, true, UserRole.ADMIN, \n                    new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), \n                    new ArrayList<>());\nuser.getActivities().add(new UserActivity(\"login\", new Date(1672531200000L)));",
              "description": ""
            },
            "name": "getActivities",
            "location": {
              "start": 78,
              "insert": 78,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "e372dd60-8bdd-4bb6-4b47-5de99c99adad",
            "ancestors": [
              "b1360724-9b76-e1a4-d542-1c9256b5a088"
            ],
            "description": "Represents geographic locations with attributes for street, city, and country. It provides getter methods and an overridden toString method to facilitate representation of address data.",
            "name": "Address",
            "location": {
              "start": 82,
              "insert": 82,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 28,
            "docLength": null
          },
          {
            "id": "9bb4d8ff-c421-c69d-8d49-3d4ba8b5f02c",
            "ancestors": [
              "b1360724-9b76-e1a4-d542-1c9256b5a088",
              "e372dd60-8bdd-4bb6-4b47-5de99c99adad"
            ],
            "description": "Returns a string value representing the street name. This method retrieves and provides access to the existing street information, allowing it to be used or processed elsewhere in the program. The returned value is an exact copy of the original street data.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string value stored in the `street` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new Address(\"123 Main St\", \"Metropolis\", \"USA\");\nString street = address.getStreet();\n",
              "description": ""
            },
            "name": "getStreet",
            "location": {
              "start": 93,
              "insert": 93,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "6728c01f-3e79-98b5-944f-7eb5ce70a144",
            "ancestors": [
              "b1360724-9b76-e1a4-d542-1c9256b5a088",
              "e372dd60-8bdd-4bb6-4b47-5de99c99adad"
            ],
            "description": "Retrieves and returns a city value. It is likely part of a larger class representing an address or geographic location, allowing other parts of the program to access the city information. The returned value is a string containing the name of the city.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the city.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new User.Address(\"123 Main St\", \"Metropolis\", \"USA\");\nSystem.out.println(address.getCity()); // Outputs: Metropolis",
              "description": ""
            },
            "name": "getCity",
            "location": {
              "start": 97,
              "insert": 97,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "7c39b586-d243-bc84-0c41-81c21eb59ce9",
            "ancestors": [
              "b1360724-9b76-e1a4-d542-1c9256b5a088",
              "e372dd60-8bdd-4bb6-4b47-5de99c99adad"
            ],
            "description": "Returns a string representing a country. It accesses and retrieves the value stored in the `country` variable, allowing other parts of the program to access or display the country information without modifying the underlying data.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the country.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new Address(\"123 Main St\", \"Metropolis\", \"USA\");\nString country = address.getCountry();\n",
              "description": ""
            },
            "name": "getCountry",
            "location": {
              "start": 101,
              "insert": 101,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "c5f0e7fb-e647-098f-a045-153a5d2a5386",
            "ancestors": [
              "b1360724-9b76-e1a4-d542-1c9256b5a088",
              "e372dd60-8bdd-4bb6-4b47-5de99c99adad"
            ],
            "description": "Returns a string representation of an object, comprising three concatenated strings: `street`, `city`, and `country`, separated by commas. This allows for easy conversion into a human-readable format. The resulting string provides information about the location.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string concatenating `street`, `city`, and `country` with commas.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new Address(\"123 Main St\", \"Metropolis\", \"USA\");\nSystem.out.println(address.toString());\n",
              "description": "\nThis will print: \n`123 Main St, Metropolis, USA`."
            },
            "name": "toString",
            "location": {
              "start": 105,
              "insert": 105,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "4a3e644d-13fb-daa4-6848-26f0aaa62014",
            "ancestors": [],
            "description": "Generates a user activity report based on the provided users, minimum age, and activity filter. It takes into account inactive users and filters out logout activities, providing a comprehensive report of each user's activities.",
            "name": "UserActivityReport",
            "location": {
              "start": 112,
              "insert": 112,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 55,
            "docLength": null
          },
          {
            "id": "03475d89-fd3f-e8ba-1b48-6d3ba7c98970",
            "ancestors": [
              "4a3e644d-13fb-daa4-6848-26f0aaa62014"
            ],
            "description": "Generates a list of user activity reports based on provided criteria. It filters users by age and activity status, then collects their activities that match a given predicate, formatting each into a report string. The results are aggregated into a list.",
            "params": [
              {
                "name": "users",
                "type_name": "List<User>",
                "description": "collection of users to be processed and generates the user activity report for each user.\n\n",
                "complex_type": true
              },
              {
                "name": "minAge",
                "type_name": "int",
                "description": "minimum age requirement for users to be included in the report, with only users who meet or exceed this age threshold being considered.",
                "complex_type": false
              },
              {
                "name": "includeInactive",
                "type_name": "boolean",
                "description": "option to include users who are not active in the report if set to true or only active users if set to false.",
                "complex_type": false
              },
              {
                "name": "activityFilter",
                "type_name": "Predicate<UserActivity>",
                "description": "predicate used to filter out certain user activities from being included in the report generation process.\n\nPredicate<UserActivity> activityFilter;",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ListString",
              "description": "a list of formatted user reports.\n\nReturns a list of strings where each string represents a user activity report. Each report includes activities for users who meet the specified age and activity filter criteria.",
              "complex_type": true
            },
            "name": "generateUserActivityReport",
            "location": {
              "start": 114,
              "insert": 114,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "ca038c73-c0af-2dbc-1e4f-31dee090e859",
            "ancestors": [
              "4a3e644d-13fb-daa4-6848-26f0aaa62014"
            ],
            "description": "Constructs a formatted string report about a user, including their name, age, status, role, and address. It also lists their activities below, each activity prefixed with a hyphen and a newline character. The resulting string is then returned as the report.",
            "params": [
              {
                "name": "user",
                "type_name": "User",
                "description": "user object from which various attributes are retrieved to construct the formatted report.\n\nName: Retrieves the user's name.\nAge: Displays the user's age.\nStatus: Reflects whether the user is active or inactive based on their status.\nRole: Shows the user's assigned role.\nAddress: Reveals the user's address.",
                "complex_type": true
              },
              {
                "name": "activities",
                "type_name": "List<String>",
                "description": "list of strings that are appended to the StringBuilder object, representing various activities performed by the user.\n\nUnwrapped as an interface-based collection of Strings; contains elements.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a formatted string representation of user information and activities.",
              "complex_type": false
            },
            "name": "formatUserReport",
            "location": {
              "start": 132,
              "insert": 132,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "d420d00a-c62b-88a6-4449-310fb6d05154",
            "ancestors": [
              "4a3e644d-13fb-daa4-6848-26f0aaa62014"
            ],
            "description": "Aggregates user data and activity logs for multiple users. It creates a list of users with their respective activities, then generates a report based on certain conditions (age above 18, non-logout actions) using the `generateUserActivityReport` method.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "command-line arguments passed to the Java program when it is executed, but it is not used in this particular code.\n\nString[] args - an array of strings representing the command-line arguments.",
                "complex_type": true
              }
            ],
            "name": "main",
            "location": {
              "start": 144,
              "insert": 144,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          }
        ]
      }
    }
  }
]