[
  {
    "name": "App.tsx",
    "path": "App.tsx",
    "content": {
      "structured": {
        "description": "Reusable components and utility functions to generate a user activity report in a React application. The report displays information about users' activities, including their roles, ages, addresses, and a list of activities they performed. It utilizes TypeScript's type system to ensure strong typing and prevent errors at compile-time.",
        "items": [
          {
            "id": "8e5ce5a4-f2c5-ceb5-3144-e6eb992afdeb",
            "ancestors": [],
            "description": "Takes a user activity as input, consisting of a username, action, and date. It returns a formatted string describing the activity, including the username, action, and date in a standardized format using the `toLocaleDateString()` method.",
            "params": [
              {
                "name": "activity",
                "optional": false,
                "type_name": "UserActivity",
                "description": "3 elements long."
              }
            ],
            "returns": {
              "type_name": "string",
              "description": "A formatted text describing an activity performed by a user, including their username, action taken, and date of performance in the format of a localized date string."
            },
            "usage": {
              "language": "typescript",
              "code": "const userActivity = ['john', 'logged in', new Date()];\nformatActivity(userActivity);",
              "description": ""
            },
            "name": "formatActivity",
            "location": {
              "start": 43,
              "insert": 43,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 4,
            "docLength": null
          },
          {
            "id": "48b832e9-3a5f-25a1-b442-a47bac147498",
            "ancestors": [],
            "description": "Generates a report showing user activities, filtered by age and activity status. It takes props for users, minimum age, and options to include inactive users and filter activities. The report displays each user's information and their corresponding activities.",
            "params": [
              {
                "name": "obj",
                "optional": false,
                "type_name": "object",
                "description": "Non-optional. It contains two properties: `users` with type `Props` and `options`, which itself is an object with optional properties `includeInactive` and `activityFilter`."
              },
              {
                "name": "obj.users",
                "optional": false,
                "type_name": "UserActivityReportProps['users']",
                "description": "Required for filtering and mapping users."
              },
              {
                "name": "obj.minAge",
                "optional": true,
                "type_name": "number",
                "description": "Used to filter users based on their age.",
                "default_value": "18"
              },
              {
                "name": "obj.options",
                "optional": false,
                "type_name": "{\n    includeInactive = defaultOptions.includeInactive,\n    activityFilter = defaultOptions.activityFilter,\n  } = defaultOptions",
                "description": "Optional with default values, which provides flexibility to customize filtering and activity display."
              }
            ],
            "returns": {
              "type_name": "JSX.Element",
              "description": "A virtual DOM node representing a user activity report. The report includes information about each user such as their name, role, age, address and activities performed, with an indication of whether they are active or inactive."
            },
            "usage": {
              "language": "typescript",
              "code": "const users = [\n  { id: 1, name: 'John Doe', age: 25, active: true, activities: ['run', 'bike'] },\n  { id: 2, name: 'Jane Smith', age: 30, active: false, activities: ['swim', 'yoga'] }\n];\nconst report = <UserActivityReport users={users} />;\n",
              "description": ""
            },
            "name": "UserActivityReport",
            "location": {
              "start": 48,
              "insert": 48,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 36,
            "docLength": null
          },
          {
            "id": "f44e6cca-da39-2e85-4744-bf8a9fa6a555",
            "ancestors": [],
            "description": "Renders a user activity report with a title and passes an array of users and minimum age as props to a child component. It also filters out logout actions from the report, including inactive users if requested.",
            "params": [],
            "usage": {
              "language": "typescript",
              "code": "const users = [{name: 'John', age: 25}, {name: 'Alice', age: 30}];\n\n<App users={users} minAge={18} />;\n",
              "description": "\nThis code defines a set of users and then renders the User Activity Report with those users."
            },
            "name": "App",
            "location": {
              "start": 122,
              "insert": 122,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "source.js",
    "path": "source.js",
    "content": {
      "structured": {
        "description": "A function `generateUserReport` that filters and transforms user data based on provided options. It uses JavaScript's built-in date manipulation capabilities to format registration dates according to the specified format. The function returns an array of objects containing user information, age, activity status, and formatted registration dates.",
        "items": [
          {
            "id": "c196f2c9-a5b5-f897-364f-63b4bbc635bb",
            "ancestors": [],
            "description": "Generates a report for users based on their age and activity status. It filters users who are at least a certain minimum age (defaulting to 18) and either active or not inactive, as specified by the options. The report includes user name, age, activity status, and registration date.",
            "params": [
              {
                "name": "users",
                "optional": false,
                "type_name": "object",
                "description": "An array of user data."
              },
              {
                "name": "minAge",
                "optional": true,
                "type_name": "number",
                "description": "Used to filter users based on their age.",
                "default_value": "18"
              },
              {
                "name": "options",
                "optional": true,
                "type_name": "object",
                "description": "Used to specify additional settings.",
                "default_value": "{}"
              }
            ],
            "returns": {
              "type_name": "object[]",
              "description": "An array of objects containing user information such as name, age, activity status, and registration date in a specified format."
            },
            "usage": {
              "language": "javascript",
              "code": "let users = [\n  { name: \"John\", age: 20, active: true, registrationDate: '2022-01-10' },\n  { name: \"Alice\", age: 19, active: false, registrationDate: '2021-09-15' }\n];\n\nlet report = generateUserReport(users);\n\n",
              "description": ""
            },
            "name": "generateUserReport",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 24,
            "docLength": null
          },
          {
            "id": "105f522a-9083-76a5-df44-1b733cb4d5c9",
            "ancestors": [
              "c196f2c9-a5b5-f897-364f-63b4bbc635bb"
            ],
            "description": "Takes a date and a format string as input, and returns a formatted date string based on the provided format. It extracts the year, month, and day from the input date and pads single-digit values with zeros before replacing placeholders in the format string.",
            "params": [
              {
                "name": "date",
                "optional": false,
                "type_name": "number",
                "description": "Unix timestamp."
              },
              {
                "name": "format",
                "optional": false,
                "type_name": "string",
                "description": "Used for formatting output."
              }
            ],
            "returns": {
              "type_name": "string",
              "description": "Formatted date according to the specified format, replacing placeholders 'YYYY', 'MM', and 'DD' with year, month, and day respectively, if necessary adding leading zero for single-digit values."
            },
            "usage": {
              "language": "javascript",
              "code": "let date = '2022-02-10';\nlet formattedDate = formatDate(date, 'DD/MM/YYYY');\n",
              "description": ""
            },
            "name": "formatDate",
            "location": {
              "start": 4,
              "insert": 4,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 11,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "source.py",
    "path": "source.py",
    "content": {
      "structured": {
        "description": "A set of classes and functions to represent users with their attributes and activities. The `User` class has properties for name, age, activity status, role, address, and a list of user activities. The `format_activity` function formats a user activity into a string. The `generate_user_activity_report` function generates a report of filtered user activities based on minimum age, include inactive users, and an activity filter.",
        "items": [
          {
            "id": "3e674f38-430d-25a4-9e44-c1856756fb3a",
            "ancestors": [],
            "description": "Defines an enumeration for user roles, which can be either `ADMIN`, `USER`, or `GUEST`. This allows developers to assign a role to a user and easily distinguish between different types of users based on their privileges and access levels.",
            "attributes": [
              {
                "name": "ADMIN",
                "type_name": "UserRole",
                "description": "Equal to \"Admin\"."
              },
              {
                "name": "USER",
                "type_name": "UserRole",
                "description": "Assigned the string value `\"User\"`. It represents a user role with limited permissions."
              },
              {
                "name": "GUEST",
                "type_name": "UserRole",
                "description": "Assigned a value of \"Guest\". It represents a guest user role with limited access or privileges."
              }
            ],
            "name": "UserRole",
            "location": {
              "start": 5,
              "insert": 6,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 4,
            "docLength": null
          },
          {
            "id": "7e8c7758-2596-97b3-8343-c6823366a0eb",
            "ancestors": [],
            "description": "Defines a user entity with attributes: name, age, activity status, role, and address. It also maintains a list of user activities. This class provides a way to represent users with varying roles and activities, facilitating storage and retrieval of user information.",
            "attributes": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Initialized with a given string value in the `__init__` method. It represents the user's name."
              },
              {
                "name": "age",
                "type_name": "int",
                "description": "Initialized during object creation with a specified integer value. It represents the age of the user."
              },
              {
                "name": "active",
                "type_name": "bool",
                "description": "Initialized with a given boolean value during object creation, indicating whether the user is active or not."
              },
              {
                "name": "role",
                "type_name": "UserRole",
                "description": "Initialized with a value provided to the class constructor. It represents the role played by the user, likely categorizing them into specific groups or positions within a system."
              },
              {
                "name": "address",
                "type_name": "Dict[str,str]",
                "description": "Expected to contain string-value pairs representing the user's address, where keys are likely street name, city, state, country, or similar details."
              },
              {
                "name": "activities",
                "type_name": "List[UserActivity]",
                "description": "Initialized with a list of user activities when the `User` object is created. It represents a collection of activities performed by the user."
              }
            ],
            "name": "User",
            "location": {
              "start": 12,
              "insert": 14,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 8,
            "docLength": null
          },
          {
            "id": "73f002f8-6476-239f-8f47-75433a98b01e",
            "ancestors": [
              "7e8c7758-2596-97b3-8343-c6823366a0eb"
            ],
            "description": "Initializes a user object by setting its properties: name, age, active status, role, address (a dictionary), and activities (a list).",
            "params": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Assigned to the instance variable `self.name`. It is expected to hold a string value representing the user's name."
              },
              {
                "name": "age",
                "type_name": "int",
                "description": "Required to create an instance of this class, indicating the user's age."
              },
              {
                "name": "active",
                "type_name": "bool",
                "description": "Assigned to an instance variable of the same name. It represents a boolean value indicating whether the user is active or not."
              },
              {
                "name": "role",
                "type_name": "UserRole",
                "description": "Assigned to an instance variable named `self.role`."
              },
              {
                "name": "address",
                "type_name": "Dict[str, str]",
                "description": "Expected to be a dictionary where keys are strings and values are also strings. This suggests that an individual's address can have multiple attributes with corresponding values."
              },
              {
                "name": "activities",
                "type_name": "List[UserActivity]",
                "description": "Used to initialize an instance variable with a list of user activities."
              }
            ],
            "usage": {
              "language": "python",
              "code": "user = User(\"John\", 30, True, UserRole.ADMIN, {\"street\": \"123 Main St\", \"city\": \"Anytown\"}, [\"Running\", \"Cycling\"])\n",
              "description": ""
            },
            "name": "__init__",
            "location": {
              "start": 14,
              "insert": 16,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "constructor",
            "length": 7,
            "docLength": null
          },
          {
            "id": "faf88784-3d1c-e196-7841-4dde091b0e2d",
            "ancestors": [],
            "description": "Formats a user activity into a string, taking a tuple-like object (`activity`) as input, which contains username, action, and date. It returns a string describing the activity in the format \"username performed action on YYYY-MM-DD\".",
            "params": [
              {
                "name": "activity",
                "type_name": "UserActivity",
                "description": "Expected to be a tuple or list that contains exactly three elements: username, action, and date."
              }
            ],
            "returns": {
              "type_name": "str",
              "description": "A formatted string that represents an activity, indicating the username who performed the action and when it was done."
            },
            "usage": {
              "language": "python",
              "code": "format_activity((\"John\", \"logged in\", datetime.date(2022, 10, 15)))",
              "description": ""
            },
            "name": "format_activity",
            "location": {
              "start": 23,
              "insert": 25,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "2ca8db29-0e4f-d9b3-5b44-c77dee5070e9",
            "ancestors": [],
            "description": "Generates a report summarizing user activities, filtering by age and activity status. It takes a list of users, an optional minimum age, and an optional dictionary of filter options (including inactive users and custom activity filters).",
            "params": [
              {
                "name": "users",
                "type_name": "List[User]",
                "description": "Expected to be a list of User objects, where each User object has attributes such as name, age, active status, role, and address."
              },
              {
                "name": "min_age",
                "type_name": "int",
                "description": "18 by default. It filters out users whose age is less than this minimum age.",
                "default_value": "18"
              },
              {
                "name": "options",
                "type_name": "Optional[Dict[str, Optional[Callable[[UserActivity], bool]]]]",
                "description": "Optional by default. It allows filtering users based on two options: whether to include inactive users and a custom activity filter.",
                "default_value": "None"
              }
            ],
            "returns": {
              "type_name": "List[Dict[str, str]]",
              "description": "A list of dictionaries. Each dictionary represents a user and contains their name, age, whether they are active or not, role, address, and a list of activities that match the provided filter criteria."
            },
            "usage": {
              "language": "python",
              "code": "users = [User('John', 25, True, Role.ADMIN), User('Jane', 30, False, Role.USER)]\ngenerate_user_activity_report(users)",
              "description": ""
            },
            "name": "generate_user_activity_report",
            "location": {
              "start": 28,
              "insert": 34,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 25,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "service.java",
    "path": "service.java",
    "content": {
      "structured": {
        "description": "Classes User and UserActivity to model user information and activities. It also provides a report generator class that uses Java Stream API to generate a report for users with specific conditions (age, activity status, role) and filters out certain activities. The main function demonstrates this by creating sample users and generating a report of their activities.",
        "items": [
          {
            "id": "fa74e236-80ec-6ea2-364d-4bfa06363a64",
            "ancestors": [],
            "description": "Represents an activity performed by a user. It captures essential details such as username, action, and date. The class provides methods to retrieve these attributes and format the activity in a specific string representation.",
            "name": "UserActivity",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 28,
            "docLength": null
          },
          {
            "id": "19e8d42c-3abe-879d-b845-2c80b1e4de12",
            "ancestors": [
              "fa74e236-80ec-6ea2-364d-4bfa06363a64"
            ],
            "description": "Retrieves and returns a string value representing a user's name, referred to as `username`. The returned string is an instance variable that stores the username.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the user's username.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity ua = new UserActivity(\"John\", \"login\", new Date());\nString name = ua.getUsername();\nSystem.out.println(name);",
              "description": ""
            },
            "name": "getUsername",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "2c504b23-c8d2-1eb6-1f45-8b89ad3867d9",
            "ancestors": [
              "fa74e236-80ec-6ea2-364d-4bfa06363a64"
            ],
            "description": "Returns the value of the `action` variable. This suggests that it is a getter method, used to retrieve the current state or value of the `action` attribute. It provides read-only access to the `action` property for external use.",
            "params": [],
            "returns": {
              "type_name": "string",
              "description": "a string value stored in the `action` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity activity = new UserActivity(\"Alice\", \"login\", new Date(1672531200000L));\nString action = activity.getAction(); // returns \"login\"",
              "description": ""
            },
            "name": "getAction",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "a97bb3a6-c6c5-6397-d545-1e214b410f9c",
            "ancestors": [
              "fa74e236-80ec-6ea2-364d-4bfa06363a64"
            ],
            "description": "Retrieves and returns a `Date` object. It does not modify or manipulate any input, but simply provides access to the stored `date`. The returned value is a snapshot of the current date at the time the method was invoked.",
            "params": [],
            "returns": {
              "type_name": "Date",
              "description": "a `Date` object representing a specific point in time.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity ua = new UserActivity(\"Alice\", \"login\", new Date(1672531200000L));\nDate date = ua.getDate();",
              "description": ""
            },
            "name": "getDate",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "c5973584-6aa7-5ea1-2b45-5e1b3fb84aa3",
            "ancestors": [
              "fa74e236-80ec-6ea2-364d-4bfa06363a64"
            ],
            "description": "Returns a string that combines the `username`, `action`, and the formatted date in \"yyyy-MM-dd\" format, using `SimpleDateFormat`. The formatted date is obtained from the `date` object.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string containing formatted date and user-action information.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity ua = new UserActivity(\"Alice\", \"login\", new Date(1672531200000L));\nSystem.out.println(ua.format());",
              "description": ""
            },
            "name": "format",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "aea90172-6966-1eb4-e24c-a515660758bd",
            "ancestors": [],
            "description": "Represents an individual user with attributes such as name, age, activity status, role, address, and a list of activities performed. The class also has getter methods to retrieve these attributes and a constructor for initializing the object.",
            "name": "User",
            "location": {
              "start": 41,
              "insert": 41,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 70,
            "docLength": null
          },
          {
            "id": "63d29a21-8822-9d81-5544-05bd7ff0bba5",
            "ancestors": [
              "aea90172-6966-1eb4-e24c-a515660758bd"
            ],
            "description": "Retrieves a string value stored in the variable `name`. The retrieved value is then returned by the function to its caller. This function allows external access to the private member variable `name`, providing a way to obtain its current state.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing an instance variable named \"name\".",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 25, true, UserRole.ADMIN, \n                    new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\nString name = user.getName();\nSystem.out.println(name);",
              "description": ""
            },
            "name": "getName",
            "location": {
              "start": 58,
              "insert": 58,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "452f5f10-8e30-d190-a844-4423f9908cfb",
            "ancestors": [
              "aea90172-6966-1eb4-e24c-a515660758bd"
            ],
            "description": "Retrieves and returns an integer value representing an individual's age. It appears to be a simple getter method, providing access to a private or protected variable named `age`. The returned value is presumably used by the calling code for further processing or display purposes.",
            "params": [],
            "returns": {
              "type_name": "integer",
              "description": "an integer value representing the age of an entity.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 25, true, UserRole.ADMIN,\n        new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\nint age = user.getAge();\nSystem.out.println(age);",
              "description": ""
            },
            "name": "getAge",
            "location": {
              "start": 62,
              "insert": 62,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "e8bfe63a-1710-40bc-f64f-ab44384fa6d3",
            "ancestors": [
              "aea90172-6966-1eb4-e24c-a515660758bd"
            ],
            "description": "Returns a boolean value indicating whether an object's state is currently active or not. This value is determined by the value of the `active` variable, which is directly accessed and returned without any modification. The function does not perform any actions but simply retrieves and reports the status.",
            "params": [],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating the current state of an object's activity.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 30, true, UserRole.USER,\n                new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\nSystem.out.println(user.isActive());",
              "description": ""
            },
            "name": "isActive",
            "location": {
              "start": 66,
              "insert": 66,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "aea5b7a4-620c-06ac-bd43-994a88197537",
            "ancestors": [
              "aea90172-6966-1eb4-e24c-a515660758bd"
            ],
            "description": "Retrieves the value of an object's `role` attribute and returns it as a `UserRole` object. The returned object represents a user's role or identity. This function provides access to the stored role information for further processing or use.",
            "params": [],
            "returns": {
              "type_name": "UserRole",
              "description": "an instance of the `UserRole` class representing a user's role.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserRole userRole = users.get(0).getRole();\n",
              "description": ""
            },
            "name": "getRole",
            "location": {
              "start": 70,
              "insert": 70,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9d6c3023-6682-1e9b-af48-0698a3994fd7",
            "ancestors": [
              "aea90172-6966-1eb4-e24c-a515660758bd"
            ],
            "description": "Retrieves an instance of the `Address` class and returns it. This method allows access to the `address` object, potentially for use or modification elsewhere in the program. The returned object represents a location with specific attributes such as street, city, state, etc.",
            "params": [],
            "returns": {
              "type_name": "Address",
              "description": "an instance of the `Address` class.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 20, true, UserRole.ADMIN,\n                    new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\nAddress address = user.getAddress();\nSystem.out.println(address.getStreet());",
              "description": ""
            },
            "name": "getAddress",
            "location": {
              "start": 74,
              "insert": 74,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "0f32a212-79b3-2eb1-1941-abb0bfc7d5c9",
            "ancestors": [
              "aea90172-6966-1eb4-e24c-a515660758bd"
            ],
            "description": "Returns a list of user activities. It does not accept any parameters and simply retrieves the pre-initialized list of activities, likely stored as an instance variable within the class. The returned list is likely to be used elsewhere in the program for further processing or display.",
            "params": [],
            "returns": {
              "type_name": "List",
              "description": "a list of user activities represented as `UserActivity` objects.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "List<UserActivity> activities = user.getActivities();\n",
              "description": "\nWhere `user` is a `User` object."
            },
            "name": "getActivities",
            "location": {
              "start": 78,
              "insert": 78,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "dcbf4e58-c854-3e90-fe4a-7b9d30511949",
            "ancestors": [
              "aea90172-6966-1eb4-e24c-a515660758bd"
            ],
            "description": "Represents an address with properties for street, city, and country. It provides getter methods to access these properties and overrides the toString method to return a string representation of the address in the format \"street, city, country\".",
            "name": "Address",
            "location": {
              "start": 82,
              "insert": 82,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 28,
            "docLength": null
          },
          {
            "id": "0bc2e091-e3f2-1dbe-1742-bce1e04388d4",
            "ancestors": [
              "aea90172-6966-1eb4-e24c-a515660758bd",
              "dcbf4e58-c854-3e90-fe4a-7b9d30511949"
            ],
            "description": "Returns a string value representing the street address. The function simply retrieves and provides access to an existing string variable named `street`. This variable is likely set elsewhere in the code, making it possible to obtain the street information when needed.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string value representing the street information.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new Address(\"123 Main St\", \"Metropolis\", \"USA\");\nString street = address.getStreet();\n",
              "description": ""
            },
            "name": "getStreet",
            "location": {
              "start": 93,
              "insert": 93,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "17b2dc8d-3d1b-e2bb-6a43-4c0552352215",
            "ancestors": [
              "aea90172-6966-1eb4-e24c-a515660758bd",
              "dcbf4e58-c854-3e90-fe4a-7b9d30511949"
            ],
            "description": "Retrieves a value representing a city and returns it as a string. The returned value is stored in the `city` variable. This method allows access to the city information.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the value of the `city` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserAddress address = new User().getAddress();\nString city = address.getCity();",
              "description": ""
            },
            "name": "getCity",
            "location": {
              "start": 97,
              "insert": 97,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "f7419457-a93e-5999-4e41-ef9191c70d69",
            "ancestors": [
              "aea90172-6966-1eb4-e24c-a515660758bd",
              "dcbf4e58-c854-3e90-fe4a-7b9d30511949"
            ],
            "description": "Returns a string value representing the country. It simply retrieves and exposes the stored country information, allowing it to be accessed or used elsewhere in the program.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string value representing the country.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"Alice\", 25, true, UserRole.ADMIN, \n                    new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\nString country = user.getAddress().getCountry();\n",
              "description": ""
            },
            "name": "getCountry",
            "location": {
              "start": 101,
              "insert": 101,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "054416a0-94bf-afb1-2a42-04c1a3c62cc4",
            "ancestors": [
              "aea90172-6966-1eb4-e24c-a515660758bd",
              "dcbf4e58-c854-3e90-fe4a-7b9d30511949"
            ],
            "description": "Returns a string representation of an object, concatenating three attributes: `street`, `city`, and `country`. The result is a comma-separated string containing these values, providing a human-readable summary of the object's location. This method overrides the default implementation in its superclass.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string combining street, city, and country values.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new Address(\"123 Main St\", \"Metropolis\", \"USA\");\nSystem.out.println(address.toString());",
              "description": ""
            },
            "name": "toString",
            "location": {
              "start": 105,
              "insert": 105,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "4b60b690-a663-9b8d-1f48-5e6e3c1b9908",
            "ancestors": [],
            "description": "Generates a comprehensive report for a list of users. It filters users based on minimum age and activity status, then collects their activities that match a given filter predicate. The report includes user details and their activities in a formatted string.",
            "name": "UserActivityReport",
            "location": {
              "start": 112,
              "insert": 112,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 55,
            "docLength": null
          },
          {
            "id": "03f77f8f-b4a8-ce94-2d4e-5b16fed8942c",
            "ancestors": [
              "4b60b690-a663-9b8d-1f48-5e6e3c1b9908"
            ],
            "description": "Generates a report for user activity based on specified conditions. It filters users by age and activity status, then for each eligible user, it retrieves their activities that match a given filter and formats them into a list. The result is a list of reports.",
            "params": [
              {
                "name": "users",
                "type_name": "List<User>",
                "description": "collection of user objects that will be processed to generate the activity report.\n\nStream of `User` objects is filtered based on age and activity status. Each `User` has an age and an active status, which can be included in the report depending on the input parameters.",
                "complex_type": true
              },
              {
                "name": "minAge",
                "type_name": "int",
                "description": "minimum age of users to be included in the report, and users with an age less than this value are filtered out.",
                "complex_type": false
              },
              {
                "name": "includeInactive",
                "type_name": "boolean",
                "description": "condition for filtering users based on their activity status, allowing inactive users to be included in the report if set to true or excluded otherwise.",
                "complex_type": false
              },
              {
                "name": "activityFilter",
                "type_name": "Predicate<UserActivity>",
                "description": "predicate that filters out certain user activities based on specific conditions during the report generation process.\n\nPredicate<UserActivity> - specifies a condition for filtering user activities.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ListString",
              "description": "a list of formatted user reports.\n\n",
              "complex_type": true
            },
            "name": "generateUserActivityReport",
            "location": {
              "start": 114,
              "insert": 114,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "6e705155-8c2b-7c90-ba48-76f651c60c07",
            "ancestors": [
              "4b60b690-a663-9b8d-1f48-5e6e3c1b9908"
            ],
            "description": "Generates a formatted string that represents user information and their associated activities. The string includes name, age, status, role, address, and a list of activities with dashes in front of each activity.",
            "params": [
              {
                "name": "user",
                "type_name": "User",
                "description": "object whose information is to be formatted into a string report, providing details such as name, age, status, role, and address.\n\nExtracted from user: name, age, status, role, address.",
                "complex_type": true
              },
              {
                "name": "activities",
                "type_name": "List<String>",
                "description": "list of strings to be appended under the \"Activities\" section of the formatted user report, displaying each activity on a new line with a prefix \"- \".\n\nIt is a list containing strings representing user activities. Each string element represents an activity with no further information provided.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a formatted string representing user information and their activities.",
              "complex_type": false
            },
            "name": "formatUserReport",
            "location": {
              "start": 132,
              "insert": 132,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "8ff30fb1-ffcf-c480-ca44-70203d02718b",
            "ancestors": [
              "4b60b690-a663-9b8d-1f48-5e6e3c1b9908"
            ],
            "description": "Generates a user activity report based on a list of users and their activities, excluding logout actions for users with age greater than or equal to 18. The report contains user names and corresponding activities.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "command-line arguments passed to the Java program, but it is not used within the provided code snippet.\n\nArrays, contains zero or more elements of type String.",
                "complex_type": true
              }
            ],
            "name": "main",
            "location": {
              "start": 144,
              "insert": 144,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          }
        ]
      }
    }
  }
]