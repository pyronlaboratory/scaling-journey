[
  {
    "name": "App.tsx",
    "path": "App.tsx",
    "content": {
      "structured": {
        "description": "An enum and type definitions for user roles and activities, respectively. It then combines these into a `User` type with nested objects and intersection types. The `Props` type is defined with generics and default values, which is used as the prop type for a React functional component called `UserActivityReport`.",
        "items": [
          {
            "id": "77f2fd42-f686-0697-e649-fe505444851a",
            "ancestors": [],
            "description": "Takes an object `activity` with three properties: `username`, `action`, and `date`. It returns a formatted string describing the activity, combining these properties with a specific format. The date is converted to a localized string using the `toLocaleDateString()` method.",
            "params": [
              {
                "name": "activity",
                "optional": false,
                "type_name": "UserActivity",
                "description": "Required for formatting."
              }
            ],
            "returns": {
              "type_name": "string",
              "description": "A formatted message representing an activity performed by a user, including their username, action taken, and date in a specified format."
            },
            "usage": {
              "language": "typescript",
              "code": "const activity = [\"john\", \"edited\", new Date()];\nformatActivity(activity); // Returns: \"john performed edited on [date]\"",
              "description": ""
            },
            "name": "formatActivity",
            "location": {
              "start": 43,
              "insert": 43,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 4,
            "docLength": null
          },
          {
            "id": "9c922ec7-e9b6-b7b1-7445-906d20a3e253",
            "ancestors": [],
            "description": "Filters and maps a list of users based on their age, activity status, and specific activities, then renders a report displaying user information and their corresponding activities.",
            "params": [
              {
                "name": "obj",
                "optional": false,
                "type_name": "object",
                "description": "Non-optional. It contains two properties: 'users' and 'options'. The 'users' property expects an array, and it's default value is not defined. The 'options' property also expects an object, with nested objects inside."
              },
              {
                "name": "obj.users",
                "optional": false,
                "type_name": "User[]",
                "description": "Used to filter and render user activity reports."
              },
              {
                "name": "obj.minAge",
                "optional": true,
                "type_name": "number",
                "description": "Used to filter users based on their age.",
                "default_value": "18"
              },
              {
                "name": "obj.options",
                "optional": false,
                "type_name": "{\n    includeInactive = defaultOptions.includeInactive,\n    activityFilter = defaultOptions.activityFilter,\n  } = defaultOptions",
                "description": "Used to customize filtering and sorting of user data."
              }
            ],
            "returns": {
              "type_name": "React.ReactElement",
              "description": "A JSX element representing the user activity report, including a list of users with their activities, sorted by age and filtered based on the criteria specified in the props."
            },
            "usage": {
              "language": "typescript",
              "code": "<UserActivityReport users={[{name: 'John', age: 20, role: 'Developer', active: true, activities: ['Coding', 'Testing']},{name: 'Mary', age: 25, role: 'Designer', active: false, activities: ['Designing', 'Prototyping']}]} />",
              "description": ""
            },
            "name": "UserActivityReport",
            "location": {
              "start": 48,
              "insert": 48,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 36,
            "docLength": null
          },
          {
            "id": "513a239b-ab8d-8fa2-a449-f102f07a5b29",
            "ancestors": [],
            "description": "Renders a React component with a title \"User Activity Report\" and passes three props to the `UserActivityReport` component: an array of users, a minimum age (18), and options for filtering user activity.",
            "params": [],
            "usage": {
              "language": "typescript",
              "code": "const users = [...]; // List of users with their activities and age\nReact.render(<App users={users} />, document.getElementById('root'));\n",
              "description": ""
            },
            "name": "App",
            "location": {
              "start": 122,
              "insert": 122,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "source.js",
    "path": "source.js",
    "content": {
      "structured": {
        "description": "A function generateUserReport that generates a report on users based on certain conditions. The function filters users by age and activity status, then maps each user object to a new format including name, age, active status, and registration date. The registration date is formatted according to the specified date format using the formatDate function.",
        "items": [
          {
            "id": "75990936-0f25-38b7-2b4e-c5b77019600c",
            "ancestors": [],
            "description": "Generates a report for users based on specified criteria. It filters users by age and activity status, and formats their registration dates according to a user-defined date format. The resulting report includes user name, age, activity status, and formatted registration date.",
            "params": [
              {
                "name": "users",
                "optional": false,
                "type_name": "user[]",
                "description": "An array of user objects."
              },
              {
                "name": "minAge",
                "optional": true,
                "type_name": "number",
                "description": "Used to filter users based on their age.",
                "default_value": "18"
              },
              {
                "name": "options",
                "optional": true,
                "type_name": "object",
                "description": "Optional, which can be used to customize the report generation process.",
                "default_value": "{}"
              }
            ],
            "returns": {
              "type_name": "object",
              "description": "An array of objects with properties name, age, active, and registrationDate. Each object represents a user meeting certain criteria."
            },
            "usage": {
              "language": "javascript",
              "code": "const users = [\n  { name: 'Alice', age: 25, active: true, registrationDate: '2020-01-01' },\n  { name: 'Bob', age: 17, active: false, registrationDate: '2019-06-15' },\n  { name: 'Charlie', age: 30, active: true, registrationDate: '2018-03-20' }\n];\n\nconst report = generateUserReport(users);\n",
              "description": ""
            },
            "name": "generateUserReport",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 24,
            "docLength": null
          },
          {
            "id": "a9f11952-4bff-289c-b540-61a81c751a9b",
            "ancestors": [
              "75990936-0f25-38b7-2b4e-c5b77019600c"
            ],
            "description": "Converts a date into a specified string format. It takes a date and a format as inputs, extracts the day, month, and year from the date, formats them according to the input format, and returns the formatted string.",
            "params": [
              {
                "name": "date",
                "optional": false,
                "type_name": "string",
                "description": "Expected to represent a date."
              },
              {
                "name": "format",
                "optional": false,
                "type_name": "string",
                "description": "Used to define the desired output format."
              }
            ],
            "returns": {
              "type_name": "string",
              "description": "A formatted date in accordance with the specified format. The returned string replaces placeholders 'YYYY', 'MM', and 'DD' with corresponding year, month, and day values, respectively."
            },
            "usage": {
              "language": "javascript",
              "code": "const result = formatDate('2023-07-25', 'YYYY-MM-DD');\n",
              "description": "\nThe result will be: '2023-07-25'"
            },
            "name": "formatDate",
            "location": {
              "start": 4,
              "insert": 4,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 11,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "source.py",
    "path": "source.py",
    "content": {
      "structured": {
        "description": "Classes and functions related to user management and activity reporting. It utilizes the `Enum` class from the built-in `enum` module to define a set of roles for users. The `User` class represents individual users with attributes such as name, age, active status, role, address, and activities. The `generate_user_activity_report` function generates a report of user activities based on given filters, including minimum age and activity types.",
        "items": [
          {
            "id": "c587f9dc-9b3d-3386-8647-a24702e0ffdb",
            "ancestors": [],
            "description": "Defines an enumeration type with three values: `ADMIN`, `USER`, and `GUEST`. Each value is associated with a string label, allowing for descriptive references to user roles within the application. This implementation enables type-safe and readable handling of user role data.",
            "attributes": [
              {
                "name": "ADMIN",
                "type_name": "UserRole",
                "description": "Assigned the value \"Admin\". It is an enumeration member that represents the role of an administrator."
              },
              {
                "name": "USER",
                "type_name": "UserRole",
                "description": "4 characters long, representing a user role with a string value \"User\"."
              },
              {
                "name": "GUEST",
                "type_name": "str",
                "description": "5 characters long, representing a user role with name 'Guest' and value 'Guest'. It is one of three roles defined by this Enum class: Admin, User, Guest."
              }
            ],
            "name": "UserRole",
            "location": {
              "start": 5,
              "insert": 6,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 4,
            "docLength": null
          },
          {
            "id": "6edf12ee-80d6-e080-a140-4a6a493d229c",
            "ancestors": [],
            "description": "Initializes a user object with attributes such as name, age, activity status, role, and address. It also includes a list of activities. This class provides a structure for representing users in an application.",
            "attributes": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Initialized with a given name when creating an instance of the class."
              },
              {
                "name": "age",
                "type_name": "int",
                "description": "Initialized with a given integer value during object creation. It represents the age of a user."
              },
              {
                "name": "active",
                "type_name": "bool",
                "description": "Used to track whether a user's account is currently active or not."
              },
              {
                "name": "role",
                "type_name": "UserRole",
                "description": "Assigned during initialization. It represents the user's role, which could be a predefined set of roles, such as administrator, moderator, or regular user."
              },
              {
                "name": "address",
                "type_name": "Dict[str,str]",
                "description": "Expected to contain a dictionary where the keys are strings and the values are also strings, representing the user's address information."
              },
              {
                "name": "activities",
                "type_name": "List[UserActivity]",
                "description": "Initialized in the constructor with the provided argument. It represents a collection of user activities, each activity being an instance of the UserActivity class."
              }
            ],
            "name": "User",
            "location": {
              "start": 12,
              "insert": 14,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 8,
            "docLength": null
          },
          {
            "id": "d583a358-24e0-51a2-bb41-01df25dd0ab5",
            "ancestors": [
              "6edf12ee-80d6-e080-a140-4a6a493d229c"
            ],
            "description": "Initializes objects with provided parameters: name, age, active status, role, address as a dictionary, and activities as a list. It sets instance variables to these values, allowing for user object creation with specific attributes.",
            "params": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Assigned to an instance variable named `self.name`. It represents the name of the user."
              },
              {
                "name": "age",
                "type_name": "int",
                "description": "Required to initialize an object of the class. It represents a user's age, which must be an integer value."
              },
              {
                "name": "active",
                "type_name": "bool",
                "description": "Used to represent whether the user is active or not."
              },
              {
                "name": "role",
                "type_name": "UserRole",
                "description": "Assigned to an instance variable with the same name. The specific details of this role are not specified, but it appears to be an enumeration or an abstract class that represents different user roles."
              },
              {
                "name": "address",
                "type_name": "Dict[str, str]",
                "description": "Expected to be a dictionary where keys are strings and values are also strings. It represents the user's address."
              },
              {
                "name": "activities",
                "type_name": "List[UserActivity]",
                "description": "Expected to hold a list of user activity objects."
              }
            ],
            "usage": {
              "language": "python",
              "code": "user = User(\"John Doe\", 30, True, UserRole.ADMIN, {\"street\": \"123 Main St\", \"city\": \"Anytown\"}, [UserActivity.HIKING, UserActivity.COOKING])",
              "description": ""
            },
            "name": "__init__",
            "location": {
              "start": 14,
              "insert": 16,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "constructor",
            "length": 7,
            "docLength": null
          },
          {
            "id": "25d399c2-890a-ecb3-1d45-d1b6ce6b2546",
            "ancestors": [],
            "description": "Takes a tuple containing user activity data (username, action, date) and returns a formatted string representing the activity. The date is converted to the format 'YYYY-MM-DD' before being included in the output string.",
            "params": [
              {
                "name": "activity",
                "type_name": "UserActivity",
                "description": "Unpacked into three variables: `username`, `action`, and `date`. This indicates that `activity` is an object with at least three attributes or properties."
              }
            ],
            "returns": {
              "type_name": "str",
              "description": "A formatted string that describes an activity performed by a user. The string includes the username, action, and date of the activity, in the format \"username performed action on YYYY-MM-DD\"."
            },
            "usage": {
              "language": "python",
              "code": "activity = (\"JohnDoe\", \"visited\", datetime.date(2022, 1, 12))\nformatted_string = format_activity(activity)",
              "description": ""
            },
            "name": "format_activity",
            "location": {
              "start": 23,
              "insert": 25,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "8cbbbbc6-8bab-7fb0-8046-3ff293522917",
            "ancestors": [],
            "description": "Generates a list of dictionaries, each representing a user's activity report. The report includes user details, such as name, age, and role, along with their activities. It filters users by minimum age and optionally includes inactive users.",
            "params": [
              {
                "name": "users",
                "type_name": "List[User]",
                "description": "Required to generate the report. It takes in a list of User objects, which are then processed and formatted into a report."
              },
              {
                "name": "min_age",
                "type_name": "int",
                "description": "18 by default. It filters users based on their age, including only those who are at least as old as this minimum age specified.",
                "default_value": "18"
              },
              {
                "name": "options",
                "type_name": "Optional[Dict[str, Optional[Callable[[UserActivity], bool]]]]",
                "description": "Optional by default. It filters users based on the presence of inactive users and activities that match a specified filter.",
                "default_value": "None"
              }
            ],
            "returns": {
              "type_name": "List[Dict[str, str]]",
              "description": "A list of dictionaries containing information about users, including their name, age, activity status, role, address and activities they have done."
            },
            "usage": {
              "language": "python",
              "code": "users = [\n    User(name='Alice', age=25, active=True, role=Role.ADMIN, address={'street': '123 Main St', 'city': 'Anytown', 'country': 'USA'}, activities=[Activity('Run'), Activity('Swim')]),\n    User(name='Bob', age=30, active=False, role=Role.USER, address={'street': '456 Elm St', 'city': 'Othertown', 'country': 'Canada'}, activities=[Activity('Hike')])\n]\n\nreport = generate_user_activity_report(users)\n",
              "description": ""
            },
            "name": "generate_user_activity_report",
            "location": {
              "start": 28,
              "insert": 34,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 25,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "service.java",
    "path": "service.java",
    "content": {
      "structured": {
        "description": "Several classes and enums that represent user information and activity data. The main function generates a report based on user activities by applying filtering criteria, such as age, activity type, and user status. The report includes detailed information about each user's activities in a formatted string.",
        "items": [
          {
            "id": "5d18125c-9105-b9b2-9044-185d6f58221a",
            "ancestors": [],
            "description": "Represents an activity performed by a user, including the username, action taken, and date of the activity. It provides a format method to convert the activity details into a string representation. The class is used to track and report on user activities.",
            "name": "UserActivity",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 28,
            "docLength": null
          },
          {
            "id": "cd1402bd-6e05-73a2-4a45-158b50579a19",
            "ancestors": [
              "5d18125c-9105-b9b2-9044-185d6f58221a"
            ],
            "description": "Retrieves and returns a stored value representing a user's username. The returned value is of type `String`. This function provides read-only access to the stored username.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing a user's name.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity ua = new UserActivity(\"John\", \"login\", new Date());\nString username = ua.getUsername();\n",
              "description": ""
            },
            "name": "getUsername",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "620f0576-12c8-329b-654c-b71231a0c762",
            "ancestors": [
              "5d18125c-9105-b9b2-9044-185d6f58221a"
            ],
            "description": "Retrieves and returns a string value representing an action. This method simply accesses a private variable `action` and returns its current state without modifying it. The returned string provides information about a specific action.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string value stored in the `action` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity userActivity = new UserActivity(\"Alice\", \"login\", new Date());\nString action = userActivity.getAction();\n",
              "description": ""
            },
            "name": "getAction",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "2f894f8f-913a-0282-ab4e-46a7350e2bf3",
            "ancestors": [
              "5d18125c-9105-b9b2-9044-185d6f58221a"
            ],
            "description": "Retrieves a `Date` object and returns it. The returned `Date` object represents a point in time, which can be used for various purposes such as storing or processing dates in a program.",
            "params": [],
            "returns": {
              "type_name": "Date",
              "description": "a `Date` object representing a point in time.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Date date = new UserActivity(\"Alice\", \"login\", new Date(1672531200000L)).getDate();\n",
              "description": ""
            },
            "name": "getDate",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "00e4f8d5-90fa-57aa-7e43-4ccccbb545d2",
            "ancestors": [
              "5d18125c-9105-b9b2-9044-185d6f58221a"
            ],
            "description": "Concatenates strings to form a message describing an action performed by a user. The message includes the username, action, and date in the format \"yyyy-MM-dd\". The function returns this formatted string.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string combining username, action, and date in a specific format.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity activity = new UserActivity(\"Alice\", \"login\", new Date(1672531200000L));\nSystem.out.println(activity.format());\n",
              "description": ""
            },
            "name": "format",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "38456cce-f180-818d-154c-1ff7e06f4010",
            "ancestors": [],
            "description": "Encapsulates user-related data and functionality. It represents an individual with attributes such as name, age, active status, role, address, and activities. The class allows for the creation of user objects and provides methods to access their properties.",
            "name": "User",
            "location": {
              "start": 41,
              "insert": 41,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 70,
            "docLength": null
          },
          {
            "id": "a9752fe9-ecbb-89bb-444b-bef8cc7479a6",
            "ancestors": [
              "38456cce-f180-818d-154c-1ff7e06f4010"
            ],
            "description": "Returns the value of the `name` variable as a string. It retrieves and provides access to the stored name. This method simply wraps up the getter functionality for the `name` attribute.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representation of an instance variable named \"name\".",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 25, true, UserRole.ADMIN, new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\nString name = user.getName();",
              "description": ""
            },
            "name": "getName",
            "location": {
              "start": 58,
              "insert": 58,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "7eb7b226-9d20-188e-1d4d-71573598a666",
            "ancestors": [
              "38456cce-f180-818d-154c-1ff7e06f4010"
            ],
            "description": "Returns an integer value representing the age of an object. The returned value is stored in a variable named `age`. This function does not modify the age, it only retrieves and returns its current state.",
            "params": [],
            "returns": {
              "type_name": "integer",
              "description": "an integer value representing the age of an object.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"Alice\", 25, true, UserRole.ADMIN,\n                new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), aliceActivities);\nint age = user.getAge();",
              "description": ""
            },
            "name": "getAge",
            "location": {
              "start": 62,
              "insert": 62,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "8f820282-14f5-2b82-e242-7813c8b42cc2",
            "ancestors": [
              "38456cce-f180-818d-154c-1ff7e06f4010"
            ],
            "description": "Returns a boolean value indicating whether an object is active or not. It simply retrieves and returns the value of the `active` variable, without performing any calculations or modifying external state. The function does not take any parameters and always returns a boolean result.",
            "params": [],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value representing the current state of the \"active\" variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "public static void main(String[] args) {\n    User user = new User(\"Alice\", 25, true, UserRole.ADMIN, \n            new Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\n    System.out.println(user.isActive());",
              "description": ""
            },
            "name": "isActive",
            "location": {
              "start": 66,
              "insert": 66,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4562055f-c125-b395-4149-df20eb8ce1b5",
            "ancestors": [
              "38456cce-f180-818d-154c-1ff7e06f4010"
            ],
            "description": "Retrieves and returns an instance of `UserRole`. This indicates that it provides access to the current user's role, possibly for purposes such as authentication or authorization. The returned value is read-only, suggesting that it may be used for querying or display purposes only.",
            "params": [],
            "returns": {
              "type_name": "UserRole",
              "description": "a `UserRole` object representing the current user's role.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserRole role = user.getRole();\n",
              "description": "\nThis will retrieve the user's role from the User class and store it in the variable \"role\"."
            },
            "name": "getRole",
            "location": {
              "start": 70,
              "insert": 70,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "3521a469-34a2-4ca0-ae42-a7e0f2edc313",
            "ancestors": [
              "38456cce-f180-818d-154c-1ff7e06f4010"
            ],
            "description": "Retrieves an object of type `Address`. It returns the value stored in the `address` variable, providing access to the contained address information.",
            "params": [],
            "returns": {
              "type_name": "Address",
              "description": "an instance of class `Address`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 25, true, UserRole.ADMIN,\n                new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\nAddress address = user.getAddress();\nSystem.out.println(address.getStreet() + \", \" + address.getCity() + \", \" + address.getCountry());",
              "description": ""
            },
            "name": "getAddress",
            "location": {
              "start": 74,
              "insert": 74,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "1ec3b2e3-a066-8890-e543-07ffea06c05a",
            "ancestors": [
              "38456cce-f180-818d-154c-1ff7e06f4010"
            ],
            "description": "Retrieves and returns a list of user activities. It appears to be a simple getter method that provides read-only access to an existing list of `UserActivity` objects, which are stored in the `activities` variable.",
            "params": [],
            "returns": {
              "type_name": "List",
              "description": "a list of `UserActivity` objects named `activities`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "List<UserActivity> activities = user.getActivities();\n",
              "description": ""
            },
            "name": "getActivities",
            "location": {
              "start": 78,
              "insert": 78,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "83ed1a3f-754a-1498-744d-9d259ac23435",
            "ancestors": [
              "38456cce-f180-818d-154c-1ff7e06f4010"
            ],
            "description": "Represents a geographic address with attributes for street, city, and country. It provides methods to get these values and overrides the toString method to return a string representation of the address in the format \"street, city, country\".",
            "name": "Address",
            "location": {
              "start": 82,
              "insert": 82,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 28,
            "docLength": null
          },
          {
            "id": "e3cb1157-12a1-02ae-684d-37f7f6e097a7",
            "ancestors": [
              "38456cce-f180-818d-154c-1ff7e06f4010",
              "83ed1a3f-754a-1498-744d-9d259ac23435"
            ],
            "description": "Retrieves the value of a string variable `street`. The returned value is a representation of the address's street name or equivalent information. This method does not modify the original data, it simply provides access to the existing information.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the value of the `street` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User.Address address = new User.Address(\"123 Main St\", \"Metropolis\", \"USA\");\nString street = address.getStreet();",
              "description": ""
            },
            "name": "getStreet",
            "location": {
              "start": 93,
              "insert": 93,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "3b093b31-7544-f68c-264f-d68a736ed645",
            "ancestors": [
              "38456cce-f180-818d-154c-1ff7e06f4010",
              "83ed1a3f-754a-1498-744d-9d259ac23435"
            ],
            "description": "Retrieves the value of a `city` variable and returns it as a string. This method allows access to the stored city information, making it available for use by other parts of the program or presentation layer. The returned value is a simple string representation of the city name.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the value of the `city` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new User.Address(\"123 Main St\", \"New York City\", \"USA\");\nString city = address.getCity();\nSystem.out.println(city); // Output: New York City",
              "description": ""
            },
            "name": "getCity",
            "location": {
              "start": 97,
              "insert": 97,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "1549f8f3-3e6b-1f82-204f-47dee2cd94c5",
            "ancestors": [
              "38456cce-f180-818d-154c-1ff7e06f4010",
              "83ed1a3f-754a-1498-744d-9d259ac23435"
            ],
            "description": "Returns a string value representing a country. It retrieves and returns an existing value stored in the variable `country`. This method allows access to the country information without modifying it.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string value representing the country.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new Address(\"123 Main St\", \"Metropolis\", \"USA\");\nString country = address.getCountry();\n",
              "description": ""
            },
            "name": "getCountry",
            "location": {
              "start": 101,
              "insert": 101,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "06ffa041-a166-b29a-654a-fd87fc2698e1",
            "ancestors": [
              "38456cce-f180-818d-154c-1ff7e06f4010",
              "83ed1a3f-754a-1498-744d-9d259ac23435"
            ],
            "description": "Returns a string representation of an object by concatenating the values of `street`, `city`, and `country`. The resulting string is formatted with commas separating each value, providing a human-readable output. This method overrides the default `toString` behavior in Java.",
            "params": [],
            "returns": {
              "type_name": "string",
              "description": "a string containing street, city, and country separated by commas.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new Address(\"123 Main St\", \"Metropolis\", \"USA\");\nSystem.out.println(address.toString());",
              "description": ""
            },
            "name": "toString",
            "location": {
              "start": 105,
              "insert": 105,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "d073cc49-a8b9-67a3-1443-3d3a1d288401",
            "ancestors": [],
            "description": "Generates and formats user activity reports from a list of users based on filters and criteria. It uses Java Stream API to process data and generate a report string for each user with their activities, status, role, and address. The main method demonstrates how to use this class to generate a report.",
            "name": "UserActivityReport",
            "location": {
              "start": 112,
              "insert": 112,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 55,
            "docLength": null
          },
          {
            "id": "674c5f20-4da1-2892-0e41-ac71d65fec71",
            "ancestors": [
              "d073cc49-a8b9-67a3-1443-3d3a1d288401"
            ],
            "description": "Generates a list of reports for users who meet certain criteria: their age is greater than or equal to the specified minimum age and they are either active or inactive (if includeInactive is true). It includes their activities that match a given predicate.",
            "params": [
              {
                "name": "users",
                "type_name": "List<User>",
                "description": "collection of users from which active user reports are generated based on specified conditions and filtering criteria.\n\nStream of users. Each user has age and activity status. Users may have multiple activities.",
                "complex_type": true
              },
              {
                "name": "minAge",
                "type_name": "int",
                "description": "minimum age of users to be included in the report, and users with ages less than `minAge` are filtered out from the result.",
                "complex_type": false
              },
              {
                "name": "includeInactive",
                "type_name": "boolean",
                "description": "option to include users who are inactive, along with active ones, in the generated report when their age is greater than or equal to the specified minimum age.",
                "complex_type": false
              },
              {
                "name": "activityFilter",
                "type_name": "Predicate<UserActivity>",
                "description": "predicate used to filter out UserActivity instances from the list of activities for each user based on specific criteria.\n\nPredicate<UserActivity> activityFilter; \nThe main property of this predicate is that it filters the user activities based on some condition defined in its implementation.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ListString",
              "description": "a list of formatted user reports.\n\n",
              "complex_type": true
            },
            "name": "generateUserActivityReport",
            "location": {
              "start": 114,
              "insert": 114,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "54d645fc-5bcd-c2ae-da40-789eb6fb4798",
            "ancestors": [
              "d073cc49-a8b9-67a3-1443-3d3a1d288401"
            ],
            "description": "Concatenates user information and activity list into a string, formatted as a report. It takes a `User` object and a list of `activities`, extracts relevant details, and returns the resulting string.",
            "params": [
              {
                "name": "user",
                "type_name": "User",
                "description": "user object whose information, including name, age, status, role, and address, is extracted and formatted into a string report.\n\nDeconstructs user: Name, Age, Status, Role, and Address.",
                "complex_type": true
              },
              {
                "name": "activities",
                "type_name": "List<String>",
                "description": "list of user activities that are appended to the formatted report as a series of bullet points, one per activity.\n\nEnumerates a collection of strings.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a formatted string containing user information and activity list.",
              "complex_type": false
            },
            "name": "formatUserReport",
            "location": {
              "start": 132,
              "insert": 132,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "9183c2d4-eb8d-f3b7-824e-adb5579cd5d0",
            "ancestors": [
              "d073cc49-a8b9-67a3-1443-3d3a1d288401"
            ],
            "description": "Generates a user activity report by filtering activities of users older than 18 with administrator role and excluding logout actions, then printing the filtered list of strings to the console.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "command-line arguments passed to the Java program when it is executed, which are not utilized in this main method.\n\n",
                "complex_type": true
              }
            ],
            "name": "main",
            "location": {
              "start": 144,
              "insert": 144,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          }
        ]
      }
    }
  }
]