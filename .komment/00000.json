[
  {
    "name": "App.tsx",
    "path": "App.tsx",
    "content": {
      "structured": {
        "description": "A React application that generates a user activity report. The report includes a list of users with their name, role, address, and activities such as login, logout, and purchase. The code uses an enum for user roles, a tuple type for user activities, and an intersection type for the User object.",
        "items": [
          {
            "id": "bd010041-eabe-37b3-1b44-efe824488c21",
            "ancestors": [],
            "description": "Converts a user activity object into a string representation. It takes an array-like object with three properties: username, action, and date. The function returns a formatted string combining these properties, displaying the username, action, and date of the activity in a human-readable format.",
            "params": [
              {
                "name": "activity",
                "optional": false,
                "type_name": "UserActivity",
                "description": "Used to format user activity information."
              }
            ],
            "returns": {
              "type_name": "string",
              "description": "A formatted message indicating the username, action and date of an activity."
            },
            "usage": {
              "language": "typescript",
              "code": "const userActivity = [\"John\", \"edited\", new Date(\"2021-08-25T14:30:00Z\")];\nformatActivity(userActivity);\n",
              "description": ""
            },
            "name": "formatActivity",
            "location": {
              "start": 43,
              "insert": 43,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 4,
            "docLength": null
          },
          {
            "id": "1840ec05-01f0-7fbd-b94e-21d24279c7c2",
            "ancestors": [],
            "description": "Filters users based on their age and activity status, then maps them to a report format displaying user information and their activities. The report is rendered as an unordered list with each user's details and activities listed individually.",
            "params": [
              {
                "name": "obj",
                "optional": false,
                "type_name": "object",
                "description": "2 level nested. It contains two properties: 'users' and 'options'. The 'users' property expects an array, while the 'options' property is an object with default values for 'includeInactive' and 'activityFilter'."
              },
              {
                "name": "obj.users",
                "optional": false,
                "type_name": "UserActivityReportProps['users']",
                "description": "An array of user objects."
              },
              {
                "name": "obj.minAge",
                "optional": true,
                "type_name": "number",
                "description": "Used to filter users by age.",
                "default_value": "18"
              },
              {
                "name": "obj.options",
                "optional": false,
                "type_name": "{\n    includeInactive = defaultOptions.includeInactive,\n    activityFilter = defaultOptions.activityFilter,\n  } = defaultOptions",
                "description": "Optional, which means that if it's not passed as an argument when calling this function, then it will have its default values."
              }
            ],
            "returns": {
              "type_name": "JSX.Element",
              "description": "A React component that represents a user activity report. The report consists of a list of user cards with their name, role, age, address and activities. Each user card includes details about the user's status and the activities they are involved in."
            },
            "usage": {
              "language": "typescript",
              "code": "const users = [\n  { name: 'John', role: 'Admin', age: 25, active: true, activities: ['Swimming', 'Golf'] },\n  { name: 'Jane', role: 'User', age: 30, active: false, activities: [] },\n];\n\n<UserActivityReport users={users} />\n",
              "description": ""
            },
            "name": "UserActivityReport",
            "location": {
              "start": 48,
              "insert": 48,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 36,
            "docLength": null
          },
          {
            "id": "39a4a38b-ae40-ee92-1c46-0eafb8ddc23a",
            "ancestors": [],
            "description": "Renders a user interface with an `<h1>` element displaying \"User Activity Report\". It also renders a `UserActivityReport` component, passing in `users`, `minAge=18`, and an object containing options: `includeInactive=true` and a filter function that excludes 'logout' actions.",
            "params": [],
            "usage": {
              "language": "typescript",
              "code": "const users = [\n    { name: 'John', age: 25, action: 'login' },\n    { name: 'Jane', age: 30, action: 'logout' }\n];\n\n<App users={users} />\n",
              "description": "\nPasses an array of user objects to the component."
            },
            "name": "App",
            "location": {
              "start": 122,
              "insert": 122,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "source.js",
    "path": "source.js",
    "content": {
      "structured": {
        "description": "A function that generates a report on users based on certain criteria. The function takes in an array of user objects and optional parameters for minimum age, include inactive users, and date format. It filters the user data based on the specified conditions and maps each user object to include name, age, active status, and registration date formatted according to the provided date format.",
        "items": [
          {
            "id": "fa318344-f1fc-9989-9948-eea534ecc086",
            "ancestors": [],
            "description": "Generates a report for users who are at least a specified minimum age and meet certain criteria for activity status. The report includes user name, age, activity status, and registration date in a specific format.",
            "params": [
              {
                "name": "users",
                "optional": false,
                "type_name": "object",
                "description": "Expected to be an array of user objects."
              },
              {
                "name": "minAge",
                "optional": true,
                "type_name": "number",
                "description": "Used to filter users by age.",
                "default_value": "18"
              },
              {
                "name": "options",
                "optional": true,
                "type_name": "object",
                "description": "Used to specify additional options for generating the report.",
                "default_value": "{}"
              }
            ],
            "returns": {
              "type_name": "UserReport",
              "description": "An array of objects. Each object represents a user and contains properties name, age, active status, and registration date in the specified format."
            },
            "usage": {
              "language": "javascript",
              "code": "const users = [\n  { name: 'John', age: 22, active: true, registrationDate: \"2020-03-01\" },\n  { name: 'Jane', age: 30, active: false, registrationDate: \"2018-02-15\" }\n];\n\nconst result = generateUserReport(users);\n",
              "description": ""
            },
            "name": "generateUserReport",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 24,
            "docLength": null
          },
          {
            "id": "1e8a4eb3-36fd-00ab-4445-67c42e408b43",
            "ancestors": [
              "fa318344-f1fc-9989-9948-eea534ecc086"
            ],
            "description": "Formats a date string according to a specified format, replacing 'YYYY' with the full year, 'MM' with the two-digit month, and 'DD' with the two-digit day, padding single digits with zeros if necessary.",
            "params": [
              {
                "name": "date",
                "optional": false,
                "type_name": "number",
                "description": "13 digits, representing a timestamp in seconds since 1970."
              },
              {
                "name": "format",
                "optional": false,
                "type_name": "string",
                "description": "Used for formatting date."
              }
            ],
            "returns": {
              "type_name": "string",
              "description": "A formatted date representation based on the provided format and the original date."
            },
            "usage": {
              "language": "javascript",
              "code": "const result = formatDate('2023-03-01', 'YYYY-MM-DD');\n",
              "description": ""
            },
            "name": "formatDate",
            "location": {
              "start": 4,
              "insert": 4,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 11,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "source.py",
    "path": "source.py",
    "content": {
      "structured": {
        "description": "An application that generates a report on user activities for a list of users. The report includes information such as user name, age, active status, role, and address, along with a filtered list of their activities. The filtering is done based on a minimum age and optional settings to include inactive users and filter out specific types of activities.",
        "items": [
          {
            "id": "5cb6561e-c7e0-74b3-5744-8bc0d0d11d14",
            "ancestors": [],
            "description": "Defines an enumeration for user roles, which are ADMIN, USER, and GUEST. Each role is represented by a unique string value. This allows for a clear and concise way to define and refer to these roles within the program.",
            "attributes": [
              {
                "name": "ADMIN",
                "type_name": "UserRole",
                "description": "Assigned a value of \"Admin\". It represents one of the possible user roles in the system, specifically an administrative role with elevated privileges."
              },
              {
                "name": "USER",
                "type_name": "UserRole",
                "description": "4 characters long, representing a user role with value \"User\"."
              },
              {
                "name": "GUEST",
                "type_name": "str",
                "description": "5 characters long. It represents a predefined role in the system, denoted as \"Guest\", which likely signifies that the user does not have any specific permissions or access rights."
              }
            ],
            "name": "UserRole",
            "location": {
              "start": 5,
              "insert": 6,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 4,
            "docLength": null
          },
          {
            "id": "f8dcea85-5e8d-ccb9-2c43-f2dcf0e43fd8",
            "ancestors": [],
            "description": "Initializes a user with attributes: name, age, activity status, role, address, and activities. It represents a complex user profile, incorporating multiple details that can be accessed or modified later.",
            "attributes": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Initialized with a given string value during object creation."
              },
              {
                "name": "age",
                "type_name": "int",
                "description": "Initialized with an integer value during object creation through the `__init__` method. It represents a user's age, which can be any positive or zero integer."
              },
              {
                "name": "active",
                "type_name": "bool",
                "description": "Initialized through the constructor with a value passed as parameter. It indicates whether the user's account is active or not, allowing for filtering or processing based on this status."
              },
              {
                "name": "role",
                "type_name": "UserRole",
                "description": "Used to store the user's role, likely indicating their permissions or privileges within a system or application."
              },
              {
                "name": "address",
                "type_name": "Dict[str,str]",
                "description": "Initialized with a dictionary that maps strings to strings, representing the user's address details, where each key-value pair represents a specific piece of information about their address."
              },
              {
                "name": "activities",
                "type_name": "List[UserActivity]",
                "description": "Used to store a list of user activities."
              }
            ],
            "name": "User",
            "location": {
              "start": 12,
              "insert": 14,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 8,
            "docLength": null
          },
          {
            "id": "e53a74eb-3c06-7c96-7044-b3b36e0f0753",
            "ancestors": [
              "f8dcea85-5e8d-ccb9-2c43-f2dcf0e43fd8"
            ],
            "description": "Initializes objects with given parameters: name, age, active status, role, address (a dictionary), and activities (a list). These attributes are assigned to corresponding instance variables for further use within the class.",
            "params": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Assigned to an instance variable with the same name. It represents a string value, likely a user's full or nickname."
              },
              {
                "name": "age",
                "type_name": "int",
                "description": "Assigned to an instance variable with the same name. It represents the age of the user as an integer value."
              },
              {
                "name": "active",
                "type_name": "bool",
                "description": "Assigned a boolean value indicating whether the user's account is active or not."
              },
              {
                "name": "role",
                "type_name": "UserRole",
                "description": "Assigned to an instance variable named `self.role`. It represents the role of the user, possibly indicating their position or status within an organization."
              },
              {
                "name": "address",
                "type_name": "Dict[str, str]",
                "description": "Used to store the user's address information, where keys are field names (e.g., \"street\", \"city\", etc.) and values are corresponding field values."
              },
              {
                "name": "activities",
                "type_name": "List[UserActivity]",
                "description": "Initialized with an empty list. It represents a collection of UserActivity objects, which are presumably instances of a custom class representing specific user activities or habits."
              }
            ],
            "usage": {
              "language": "python",
              "code": "user1 = User(\"John\", 25, True, UserRole.ADMINISTRATOR, {\"street\": \"123 Main St\"}, [UserActivity.RUNNING, UserActivity.SWIMING])",
              "description": ""
            },
            "name": "__init__",
            "location": {
              "start": 14,
              "insert": 16,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "constructor",
            "length": 7,
            "docLength": null
          },
          {
            "id": "03d368aa-c63d-4fb2-8c49-967b8e4f6d99",
            "ancestors": [],
            "description": "Takes a tuple representing user activity as input and returns a formatted string describing the activity. It extracts username, action, and date from the tuple, then combines them into a sentence with the specified date format.",
            "params": [
              {
                "name": "activity",
                "type_name": "UserActivity",
                "description": "Unpacked into three variables: username, action, and date."
              }
            ],
            "returns": {
              "type_name": "str",
              "description": "A formatted string representing an activity, consisting of a username, action, and date. The format is \"{username} performed {action} on {date}\"."
            },
            "usage": {
              "language": "python",
              "code": "activity = (\"John\", \"logged in\", datetime.date(2023, 3, 22))\nformatted_activity = format_activity(activity)\n",
              "description": ""
            },
            "name": "format_activity",
            "location": {
              "start": 23,
              "insert": 25,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "92b9795c-2d29-25b1-3a45-c71eaff76fe8",
            "ancestors": [],
            "description": "Generates a list of dictionaries, each representing a user's activity report. It filters users by age and activity status (active or inactive), applies an optional activity filter, and includes relevant information such as name, role, address, and activities.",
            "params": [
              {
                "name": "users",
                "type_name": "List[User]",
                "description": "Required to generate a report for one or more users. It can contain multiple instances of User objects."
              },
              {
                "name": "min_age",
                "type_name": "int",
                "description": "18 by default. It filters users based on their age, allowing only those with an age greater than or equal to `min_age` to be included in the report.",
                "default_value": "18"
              },
              {
                "name": "options",
                "type_name": "Optional[Dict[str, Optional[Callable[[UserActivity], bool]]]]",
                "description": "Defaulted to an empty dictionary. It allows users to specify additional filtering criteria for user activities and whether inactive users should be included in the report.",
                "default_value": "None"
              }
            ],
            "returns": {
              "type_name": "List[Dict[str, str]]",
              "description": "A list of dictionaries. Each dictionary represents a user's information and contains the following keys: \"name\", \"age\", \"active\", \"role\", \"address\", and \"activities\"."
            },
            "usage": {
              "language": "python",
              "code": "users = [User(\"John\", 25, True, Role.ADMIN, {\"street\": \"123 Main St\", \"city\": \"Anytown\", \"country\": \"USA\"}, [Activity(\"swimming\"), Activity(\"hiking\")]),\n         User(\"Jane\", 17, False, Role.USER, {\"street\": \"456 Elm St\", \"city\": \"Othertown\", \"country\": \"Canada\"}, [])]\nfiltered_report = generate_user_activity_report(users)\n",
              "description": ""
            },
            "name": "generate_user_activity_report",
            "location": {
              "start": 28,
              "insert": 34,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 25,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "service.java",
    "path": "service.java",
    "content": {
      "structured": {
        "description": "Classes and enums representing users, their activities, and addresses. It uses Java Stream API and lambda expressions to generate a user activity report based on certain conditions. The report includes details about each user, such as name, age, status, role, and address, along with the activities they performed.",
        "items": [
          {
            "id": "8f9096e5-e317-a892-0444-d7e5ba3d7e47",
            "ancestors": [],
            "description": "Represents an activity performed by a user in a system. It encapsulates the details of a specific action taken by a user, including the user's name, the action itself, and the date it was performed. The class provides a way to format this information into a human-readable string.",
            "name": "UserActivity",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 28,
            "docLength": null
          },
          {
            "id": "be8ee171-82bc-d79d-7f4f-712741dc9b2e",
            "ancestors": [
              "8f9096e5-e317-a892-0444-d7e5ba3d7e47"
            ],
            "description": "Retrieves the value of a variable named `username` and returns it as a string. This suggests that the variable `username` stores the username of an entity, likely for identification or authentication purposes. The returned string can be used to access or display the username accordingly.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the username.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity userActivity = new UserActivity(\"John\", \"login\", new Date());\nString username = userActivity.getUsername();\nSystem.out.println(username); // Output: John",
              "description": ""
            },
            "name": "getUsername",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "3e7146cc-cbfd-75bf-1b49-7e738a74a13d",
            "ancestors": [
              "8f9096e5-e317-a892-0444-d7e5ba3d7e47"
            ],
            "description": "Retrieves and returns a string value representing an action. The returned value is stored in the `action` variable, which may have been previously set by another part of the program. This allows other parts of the code to access and utilize the current action value.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string value stored in the `action` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity ua = new UserActivity(\"Alice\", \"login\", new Date());\nString action = ua.getAction(); \nSystem.out.println(action); // Output: login",
              "description": ""
            },
            "name": "getAction",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "fd660805-f903-4ab0-7042-342b8d38ded5",
            "ancestors": [
              "8f9096e5-e317-a892-0444-d7e5ba3d7e47"
            ],
            "description": "Retrieves a `Date` object and returns it. The returned object represents a specific point in time, encapsulating the year, month, day, hour, minute, second, and millisecond.",
            "params": [],
            "returns": {
              "type_name": "Date",
              "description": "a `Date` object containing the current system date and time.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Date date = new UserActivity(\"Alice\", \"login\", new Date(1672531200000L)).getDate();",
              "description": ""
            },
            "name": "getDate",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b921bb35-c029-eab6-e041-5a419e4955ca",
            "ancestors": [
              "8f9096e5-e317-a892-0444-d7e5ba3d7e47"
            ],
            "description": "Concatenates a string representation of date, an action, and a username to produce a formatted string. It uses a SimpleDateFormat object to format the date in the specified format \"yyyy-MM-dd\". The resulting string describes an event performed by a user on a specific date.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a formatted string containing the username, action, and date.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity activity = new UserActivity(\"John\", \"login\", new Date());\nSystem.out.println(activity.format());",
              "description": ""
            },
            "name": "format",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "193a9ebd-5ffa-3c84-4f40-d1a6166cd2bb",
            "ancestors": [],
            "description": "Represents an individual with details such as name, age, activity status, role, address, and a list of activities. It provides getters for these properties and has a nested Address class to represent the user's location.",
            "name": "User",
            "location": {
              "start": 41,
              "insert": 41,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 70,
            "docLength": null
          },
          {
            "id": "342f4eda-fa3c-d5a5-b24e-9ea1afb5a8dd",
            "ancestors": [
              "193a9ebd-5ffa-3c84-4f40-d1a6166cd2bb"
            ],
            "description": "Retrieves and returns a string value representing the name. The returned value is stored in a variable named `name`. This function provides an interface to access the name attribute.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representation of an instance variable named \"name\".",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 25, true, UserRole.ADMIN,\n        new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\nString name = user.getName();\n",
              "description": ""
            },
            "name": "getName",
            "location": {
              "start": 58,
              "insert": 58,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9f7557ba-148a-1483-ac40-70629401ae79",
            "ancestors": [
              "193a9ebd-5ffa-3c84-4f40-d1a6166cd2bb"
            ],
            "description": "Retrieves and returns an integer value representing a person's age. The age is stored as a variable within the class, which allows for its retrieval through this method. This function does not modify the age but rather provides access to it.",
            "params": [],
            "returns": {
              "type_name": "integer",
              "description": "an integer representing the current age.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 25, true, UserRole.ADMIN, new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\nint age = user.getAge();\nSystem.out.println(age);",
              "description": ""
            },
            "name": "getAge",
            "location": {
              "start": 62,
              "insert": 62,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "6854ade5-f2da-edb1-d74d-565d218c81ab",
            "ancestors": [
              "193a9ebd-5ffa-3c84-4f40-d1a6166cd2bb"
            ],
            "description": "Returns a boolean value indicating the state of an object or variable called \"active\". The exact purpose and scope of \"active\" are not specified, but it is likely a flag or indicator used elsewhere in the program to control execution flow.",
            "params": [],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating whether the object's \"active\" state is true or false.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"Alice\", 25, true, UserRole.ADMIN, \n                     new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), \n                     new ArrayList<>());\nSystem.out.println(user.isActive());",
              "description": ""
            },
            "name": "isActive",
            "location": {
              "start": 66,
              "insert": 66,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "25427a19-69aa-67b9-e842-21bb4e8b982a",
            "ancestors": [
              "193a9ebd-5ffa-3c84-4f40-d1a6166cd2bb"
            ],
            "description": "Returns an instance of the `UserRole` class, representing a user's role. This method retrieves and provides access to the existing user role without modifying it. The returned object is read-only, reflecting the current state of the user's role.",
            "params": [],
            "returns": {
              "type_name": "UserRole",
              "description": "an instance of `UserRole`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"Alice\", 25, true, UserRole.ADMIN, \n                    new Address(\"123 Main St\", \"Metropolis\", \"USA\"), \n                    new ArrayList<>());\nUserRole role = user.getRole();\nSystem.out.println(role);",
              "description": ""
            },
            "name": "getRole",
            "location": {
              "start": 70,
              "insert": 70,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "563bf15d-7f83-9f9d-9e47-768f22e85f98",
            "ancestors": [
              "193a9ebd-5ffa-3c84-4f40-d1a6166cd2bb"
            ],
            "description": "Retrieves and returns an object of type `Address`. The returned object is assigned to a variable named `address`, which is presumably declared elsewhere in the code. This function provides read-only access to the stored address information.",
            "params": [],
            "returns": {
              "type_name": "Address",
              "description": "an object of type `Address`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"Alice\", 25, true, UserRole.ADMIN,\n        new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), aliceActivities);\nAddress address = user.getAddress();\n",
              "description": ""
            },
            "name": "getAddress",
            "location": {
              "start": 74,
              "insert": 74,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "bb18c66a-52cd-178d-df41-729190878449",
            "ancestors": [
              "193a9ebd-5ffa-3c84-4f40-d1a6166cd2bb"
            ],
            "description": "Retrieves a list of user activities and returns it. The returned list is not modified by the function, as it simply provides access to an existing collection of activities. This read-only approach allows for querying or rendering the activities without altering their state.",
            "params": [],
            "returns": {
              "type_name": "List",
              "description": "a list of `UserActivity` objects.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "List<UserActivity> activities = users.get(0).getActivities();\n",
              "description": ""
            },
            "name": "getActivities",
            "location": {
              "start": 78,
              "insert": 78,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "496d344b-2969-97b7-0645-c155471ea384",
            "ancestors": [
              "193a9ebd-5ffa-3c84-4f40-d1a6166cd2bb"
            ],
            "description": "Represents an address with properties for street, city, and country. It provides a way to construct an address from these components and offers a string representation of the address. The class is designed to encapsulate an address value object.",
            "name": "Address",
            "location": {
              "start": 82,
              "insert": 82,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 28,
            "docLength": null
          },
          {
            "id": "90f220fc-3d24-329d-4c43-f582152424d2",
            "ancestors": [
              "193a9ebd-5ffa-3c84-4f40-d1a6166cd2bb",
              "496d344b-2969-97b7-0645-c155471ea384"
            ],
            "description": "Retrieves and returns a string value representing the street address. This method is likely part of a larger class for encapsulating or manipulating geographic information, such as an address book entry. The returned value is presumably stored in an instance variable named `street`.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the value of the `street` variable.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User.Address address = new User.Address(\"123 Main St\", \"Metropolis\", \"USA\");\nString street = address.getStreet();",
              "description": ""
            },
            "name": "getStreet",
            "location": {
              "start": 93,
              "insert": 93,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "f56cb52d-5709-b687-6a49-b733ec19722b",
            "ancestors": [
              "193a9ebd-5ffa-3c84-4f40-d1a6166cd2bb",
              "496d344b-2969-97b7-0645-c155471ea384"
            ],
            "description": "Retrieves and returns a string value representing a city. This method appears to provide read-only access to the stored city information, allowing users to retrieve the current city value without modifying it. The returned value is a copy of the internal `city` variable.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string value representing the city.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new User.Address(\"123 Main St\", \"Metropolis\", \"USA\");\nString city = address.getCity();\n",
              "description": ""
            },
            "name": "getCity",
            "location": {
              "start": 97,
              "insert": 97,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "f5aff567-cbd7-ffb2-0948-0bf5413646ee",
            "ancestors": [
              "193a9ebd-5ffa-3c84-4f40-d1a6166cd2bb",
              "496d344b-2969-97b7-0645-c155471ea384"
            ],
            "description": "Retrieves and returns a string value representing a country. This function provides read-only access to the internal state of an object, allowing users to obtain the current country without modifying it. The returned value is a simple string representation of the country.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the country's name or value.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new Address(\"123 Main St\", \"New York\", \"USA\");\nString country = address.getCountry();",
              "description": ""
            },
            "name": "getCountry",
            "location": {
              "start": 101,
              "insert": 101,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "9f1ce9e4-9bc5-a78c-004b-1dc478d21ae5",
            "ancestors": [
              "193a9ebd-5ffa-3c84-4f40-d1a6166cd2bb",
              "496d344b-2969-97b7-0645-c155471ea384"
            ],
            "description": "Concatenates three string variables: `street`, `city`, and `country`, separated by commas, to form a single string representation of an object's address. This method overrides the default `toString` behavior, providing a custom string output for objects of this class.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string concatenation of street, city, and country.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new Address(\"123 Main St\", \"Metropolis\", \"USA\");\nSystem.out.println(address.toString());",
              "description": ""
            },
            "name": "toString",
            "location": {
              "start": 105,
              "insert": 105,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "75ce2fc2-ca31-1d8e-484a-82cb038bb506",
            "ancestors": [],
            "description": "Generates a user activity report based on provided input parameters, filtering users by age and including inactive users if required, then formatting each user's activities in a readable format. The generated report includes essential information about the user and their activities.",
            "name": "UserActivityReport",
            "location": {
              "start": 112,
              "insert": 112,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 55,
            "docLength": null
          },
          {
            "id": "cab5c418-ece7-9b90-064d-66aec00ef780",
            "ancestors": [
              "75ce2fc2-ca31-1d8e-484a-82cb038bb506"
            ],
            "description": "Generates a report on user activity by filtering users based on age and activity status, then collecting their activities that match a specified filter. The report includes formatted activities for each user.",
            "params": [
              {
                "name": "users",
                "type_name": "List<User>",
                "description": "list of user objects to be processed and filtered according to specific criteria.\n\nStreamed for filtering and mapping operations. Contains a collection of user objects. Each user object has an age property and an isActive property.",
                "complex_type": true
              },
              {
                "name": "minAge",
                "type_name": "int",
                "description": "minimum age of users to include in the report, and it filters out users with an age less than this value.",
                "complex_type": false
              },
              {
                "name": "includeInactive",
                "type_name": "boolean",
                "description": "boolean flag that determines whether to include inactive users or only active users in the report generation process.",
                "complex_type": false
              },
              {
                "name": "activityFilter",
                "type_name": "Predicate<UserActivity>",
                "description": "predicate used to filter user activities, allowing only those activities that satisfy the specified condition to be included in the report.\n\nFiltered by predicate, accepting user activities that match specific conditions. The exact condition is unknown due to deconstruction.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ListString",
              "description": "a list of user activity reports.\n\nThe output is a list of strings. Each string represents a user's report activity. The list contains only users whose age is greater than or equal to the minimum age and either include inactive users or have active status.",
              "complex_type": true
            },
            "name": "generateUserActivityReport",
            "location": {
              "start": 114,
              "insert": 114,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "db7c60fa-a807-2980-0740-d5c894c799c8",
            "ancestors": [
              "75ce2fc2-ca31-1d8e-484a-82cb038bb506"
            ],
            "description": "Concatenates user information and a list of activities into a formatted string. The string includes the user's name, age, status, role, address, and a list of activities separated by dashes.",
            "params": [
              {
                "name": "user",
                "type_name": "User",
                "description": "information to be formatted and appended to a string, including name, age, status, role, address, and activities.\n\nExtracts and includes user's name, age, status, role, and address in the output report.",
                "complex_type": true
              },
              {
                "name": "activities",
                "type_name": "List<String>",
                "description": "list of strings that are appended to the report as \"Activities\" with each activity preceded by a hyphen and separated by new lines.\n\nIterates over a list of strings; each string represents an activity.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a formatted string containing user information and their activities.",
              "complex_type": false
            },
            "name": "formatUserReport",
            "location": {
              "start": 132,
              "insert": 132,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "d064bf67-f5b7-3087-b84c-db237003cd51",
            "ancestors": [
              "75ce2fc2-ca31-1d8e-484a-82cb038bb506"
            ],
            "description": "Generates a user activity report by filtering activities of users above a specified age (18) and excluding logout actions, then prints the filtered activities as strings.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "command-line arguments passed to the program when it is executed.\n\nIt is an array of type `String`, containing multiple strings representing command-line arguments passed to the program.",
                "complex_type": true
              }
            ],
            "name": "main",
            "location": {
              "start": 144,
              "insert": 144,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          }
        ]
      }
    }
  }
]