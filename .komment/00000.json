[
  {
    "name": "App.tsx",
    "path": "App.tsx",
    "content": {
      "structured": {
        "description": "Reusable components and utility functions to generate a user activity report in a React application. The report displays information about users' activities, including their roles, ages, addresses, and a list of activities they performed. It utilizes TypeScript's type system to ensure strong typing and prevent errors at compile-time.",
        "items": [
          {
            "id": "8e5ce5a4-f2c5-ceb5-3144-e6eb992afdeb",
            "ancestors": [],
            "description": "Takes a user activity as input, consisting of a username, action, and date. It returns a formatted string describing the activity, including the username, action, and date in a standardized format using the `toLocaleDateString()` method.",
            "params": [
              {
                "name": "activity",
                "optional": false,
                "type_name": "UserActivity",
                "description": "3 elements long."
              }
            ],
            "returns": {
              "type_name": "string",
              "description": "A formatted text describing an activity performed by a user, including their username, action taken, and date of performance in the format of a localized date string."
            },
            "usage": {
              "language": "typescript",
              "code": "const userActivity = ['john', 'logged in', new Date()];\nformatActivity(userActivity);",
              "description": ""
            },
            "name": "formatActivity",
            "location": {
              "start": 43,
              "insert": 43,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 4,
            "docLength": null
          },
          {
            "id": "48b832e9-3a5f-25a1-b442-a47bac147498",
            "ancestors": [],
            "description": "Generates a report showing user activities, filtered by age and activity status. It takes props for users, minimum age, and options to include inactive users and filter activities. The report displays each user's information and their corresponding activities.",
            "params": [
              {
                "name": "obj",
                "optional": false,
                "type_name": "object",
                "description": "Non-optional. It contains two properties: `users` with type `Props` and `options`, which itself is an object with optional properties `includeInactive` and `activityFilter`."
              },
              {
                "name": "obj.users",
                "optional": false,
                "type_name": "UserActivityReportProps['users']",
                "description": "Required for filtering and mapping users."
              },
              {
                "name": "obj.minAge",
                "optional": true,
                "type_name": "number",
                "description": "Used to filter users based on their age.",
                "default_value": "18"
              },
              {
                "name": "obj.options",
                "optional": false,
                "type_name": "{\n    includeInactive = defaultOptions.includeInactive,\n    activityFilter = defaultOptions.activityFilter,\n  } = defaultOptions",
                "description": "Optional with default values, which provides flexibility to customize filtering and activity display."
              }
            ],
            "returns": {
              "type_name": "JSX.Element",
              "description": "A virtual DOM node representing a user activity report. The report includes information about each user such as their name, role, age, address and activities performed, with an indication of whether they are active or inactive."
            },
            "usage": {
              "language": "typescript",
              "code": "const users = [\n  { id: 1, name: 'John Doe', age: 25, active: true, activities: ['run', 'bike'] },\n  { id: 2, name: 'Jane Smith', age: 30, active: false, activities: ['swim', 'yoga'] }\n];\nconst report = <UserActivityReport users={users} />;\n",
              "description": ""
            },
            "name": "UserActivityReport",
            "location": {
              "start": 48,
              "insert": 48,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 36,
            "docLength": null
          },
          {
            "id": "f44e6cca-da39-2e85-4744-bf8a9fa6a555",
            "ancestors": [],
            "description": "Renders a user activity report with a title and passes an array of users and minimum age as props to a child component. It also filters out logout actions from the report, including inactive users if requested.",
            "params": [],
            "usage": {
              "language": "typescript",
              "code": "const users = [{name: 'John', age: 25}, {name: 'Alice', age: 30}];\n\n<App users={users} minAge={18} />;\n",
              "description": "\nThis code defines a set of users and then renders the User Activity Report with those users."
            },
            "name": "App",
            "location": {
              "start": 122,
              "insert": 122,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 6,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "source.js",
    "path": "source.js",
    "content": {
      "structured": {
        "description": "A function `generateUserReport` that filters and transforms user data based on provided options. It uses JavaScript's built-in date manipulation capabilities to format registration dates according to the specified format. The function returns an array of objects containing user information, age, activity status, and formatted registration dates.",
        "items": [
          {
            "id": "c196f2c9-a5b5-f897-364f-63b4bbc635bb",
            "ancestors": [],
            "description": "Generates a report for users based on their age and activity status. It filters users who are at least a certain minimum age (defaulting to 18) and either active or not inactive, as specified by the options. The report includes user name, age, activity status, and registration date.",
            "params": [
              {
                "name": "users",
                "optional": false,
                "type_name": "object",
                "description": "An array of user data."
              },
              {
                "name": "minAge",
                "optional": true,
                "type_name": "number",
                "description": "Used to filter users based on their age.",
                "default_value": "18"
              },
              {
                "name": "options",
                "optional": true,
                "type_name": "object",
                "description": "Used to specify additional settings.",
                "default_value": "{}"
              }
            ],
            "returns": {
              "type_name": "object[]",
              "description": "An array of objects containing user information such as name, age, activity status, and registration date in a specified format."
            },
            "usage": {
              "language": "javascript",
              "code": "let users = [\n  { name: \"John\", age: 20, active: true, registrationDate: '2022-01-10' },\n  { name: \"Alice\", age: 19, active: false, registrationDate: '2021-09-15' }\n];\n\nlet report = generateUserReport(users);\n\n",
              "description": ""
            },
            "name": "generateUserReport",
            "location": {
              "start": 1,
              "insert": 1,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "function",
            "length": 24,
            "docLength": null
          },
          {
            "id": "105f522a-9083-76a5-df44-1b733cb4d5c9",
            "ancestors": [
              "c196f2c9-a5b5-f897-364f-63b4bbc635bb"
            ],
            "description": "Takes a date and a format string as input, and returns a formatted date string based on the provided format. It extracts the year, month, and day from the input date and pads single-digit values with zeros before replacing placeholders in the format string.",
            "params": [
              {
                "name": "date",
                "optional": false,
                "type_name": "number",
                "description": "Unix timestamp."
              },
              {
                "name": "format",
                "optional": false,
                "type_name": "string",
                "description": "Used for formatting output."
              }
            ],
            "returns": {
              "type_name": "string",
              "description": "Formatted date according to the specified format, replacing placeholders 'YYYY', 'MM', and 'DD' with year, month, and day respectively, if necessary adding leading zero for single-digit values."
            },
            "usage": {
              "language": "javascript",
              "code": "let date = '2022-02-10';\nlet formattedDate = formatDate(date, 'DD/MM/YYYY');\n",
              "description": ""
            },
            "name": "formatDate",
            "location": {
              "start": 4,
              "insert": 4,
              "offset": " ",
              "indent": 2,
              "comment": null
            },
            "item_type": "function",
            "length": 11,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "source.py",
    "path": "source.py",
    "content": {
      "structured": {
        "description": "A set of classes and functions to represent users with their attributes and activities. The `User` class has properties for name, age, activity status, role, address, and a list of user activities. The `format_activity` function formats a user activity into a string. The `generate_user_activity_report` function generates a report of filtered user activities based on minimum age, include inactive users, and an activity filter.",
        "items": [
          {
            "id": "3e674f38-430d-25a4-9e44-c1856756fb3a",
            "ancestors": [],
            "description": "Defines an enumeration for user roles, which can be either `ADMIN`, `USER`, or `GUEST`. This allows developers to assign a role to a user and easily distinguish between different types of users based on their privileges and access levels.",
            "attributes": [
              {
                "name": "ADMIN",
                "type_name": "UserRole",
                "description": "Equal to \"Admin\"."
              },
              {
                "name": "USER",
                "type_name": "UserRole",
                "description": "Assigned the string value `\"User\"`. It represents a user role with limited permissions."
              },
              {
                "name": "GUEST",
                "type_name": "UserRole",
                "description": "Assigned a value of \"Guest\". It represents a guest user role with limited access or privileges."
              }
            ],
            "name": "UserRole",
            "location": {
              "start": 5,
              "insert": 6,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 4,
            "docLength": null
          },
          {
            "id": "7e8c7758-2596-97b3-8343-c6823366a0eb",
            "ancestors": [],
            "description": "Defines a user entity with attributes: name, age, activity status, role, and address. It also maintains a list of user activities. This class provides a way to represent users with varying roles and activities, facilitating storage and retrieval of user information.",
            "attributes": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Initialized with a given string value in the `__init__` method. It represents the user's name."
              },
              {
                "name": "age",
                "type_name": "int",
                "description": "Initialized during object creation with a specified integer value. It represents the age of the user."
              },
              {
                "name": "active",
                "type_name": "bool",
                "description": "Initialized with a given boolean value during object creation, indicating whether the user is active or not."
              },
              {
                "name": "role",
                "type_name": "UserRole",
                "description": "Initialized with a value provided to the class constructor. It represents the role played by the user, likely categorizing them into specific groups or positions within a system."
              },
              {
                "name": "address",
                "type_name": "Dict[str,str]",
                "description": "Expected to contain string-value pairs representing the user's address, where keys are likely street name, city, state, country, or similar details."
              },
              {
                "name": "activities",
                "type_name": "List[UserActivity]",
                "description": "Initialized with a list of user activities when the `User` object is created. It represents a collection of activities performed by the user."
              }
            ],
            "name": "User",
            "location": {
              "start": 12,
              "insert": 14,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 8,
            "docLength": null
          },
          {
            "id": "73f002f8-6476-239f-8f47-75433a98b01e",
            "ancestors": [
              "7e8c7758-2596-97b3-8343-c6823366a0eb"
            ],
            "description": "Initializes a user object by setting its properties: name, age, active status, role, address (a dictionary), and activities (a list).",
            "params": [
              {
                "name": "name",
                "type_name": "str",
                "description": "Assigned to the instance variable `self.name`. It is expected to hold a string value representing the user's name."
              },
              {
                "name": "age",
                "type_name": "int",
                "description": "Required to create an instance of this class, indicating the user's age."
              },
              {
                "name": "active",
                "type_name": "bool",
                "description": "Assigned to an instance variable of the same name. It represents a boolean value indicating whether the user is active or not."
              },
              {
                "name": "role",
                "type_name": "UserRole",
                "description": "Assigned to an instance variable named `self.role`."
              },
              {
                "name": "address",
                "type_name": "Dict[str, str]",
                "description": "Expected to be a dictionary where keys are strings and values are also strings. This suggests that an individual's address can have multiple attributes with corresponding values."
              },
              {
                "name": "activities",
                "type_name": "List[UserActivity]",
                "description": "Used to initialize an instance variable with a list of user activities."
              }
            ],
            "usage": {
              "language": "python",
              "code": "user = User(\"John\", 30, True, UserRole.ADMIN, {\"street\": \"123 Main St\", \"city\": \"Anytown\"}, [\"Running\", \"Cycling\"])\n",
              "description": ""
            },
            "name": "__init__",
            "location": {
              "start": 14,
              "insert": 16,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "constructor",
            "length": 7,
            "docLength": null
          },
          {
            "id": "faf88784-3d1c-e196-7841-4dde091b0e2d",
            "ancestors": [],
            "description": "Formats a user activity into a string, taking a tuple-like object (`activity`) as input, which contains username, action, and date. It returns a string describing the activity in the format \"username performed action on YYYY-MM-DD\".",
            "params": [
              {
                "name": "activity",
                "type_name": "UserActivity",
                "description": "Expected to be a tuple or list that contains exactly three elements: username, action, and date."
              }
            ],
            "returns": {
              "type_name": "str",
              "description": "A formatted string that represents an activity, indicating the username who performed the action and when it was done."
            },
            "usage": {
              "language": "python",
              "code": "format_activity((\"John\", \"logged in\", datetime.date(2022, 10, 15)))",
              "description": ""
            },
            "name": "format_activity",
            "location": {
              "start": 23,
              "insert": 25,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 3,
            "docLength": null
          },
          {
            "id": "2ca8db29-0e4f-d9b3-5b44-c77dee5070e9",
            "ancestors": [],
            "description": "Generates a report summarizing user activities, filtering by age and activity status. It takes a list of users, an optional minimum age, and an optional dictionary of filter options (including inactive users and custom activity filters).",
            "params": [
              {
                "name": "users",
                "type_name": "List[User]",
                "description": "Expected to be a list of User objects, where each User object has attributes such as name, age, active status, role, and address."
              },
              {
                "name": "min_age",
                "type_name": "int",
                "description": "18 by default. It filters out users whose age is less than this minimum age.",
                "default_value": "18"
              },
              {
                "name": "options",
                "type_name": "Optional[Dict[str, Optional[Callable[[UserActivity], bool]]]]",
                "description": "Optional by default. It allows filtering users based on two options: whether to include inactive users and a custom activity filter.",
                "default_value": "None"
              }
            ],
            "returns": {
              "type_name": "List[Dict[str, str]]",
              "description": "A list of dictionaries. Each dictionary represents a user and contains their name, age, whether they are active or not, role, address, and a list of activities that match the provided filter criteria."
            },
            "usage": {
              "language": "python",
              "code": "users = [User('John', 25, True, Role.ADMIN), User('Jane', 30, False, Role.USER)]\ngenerate_user_activity_report(users)",
              "description": ""
            },
            "name": "generate_user_activity_report",
            "location": {
              "start": 28,
              "insert": 34,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "function",
            "length": 25,
            "docLength": null
          }
        ]
      }
    }
  },
  {
    "name": "service.java",
    "path": "service.java",
    "content": {
      "structured": {
        "description": "Classes for user, address and user activity. It also has a report generator class that takes a list of users, minimum age, a flag to include inactive users and an activity filter as inputs. The report generator uses streams to generate a report that includes information about each user's name, age, status, role and activities.",
        "items": [
          {
            "id": "fa8c8b25-b051-dba5-7f48-aef7c3bef095",
            "ancestors": [],
            "description": "Represents a user's activity with date and time information. It provides getter methods for retrieving the username, action performed, and date of the activity, as well as a format method for generating a human-readable string representation.",
            "name": "UserActivity",
            "location": {
              "start": 12,
              "insert": 12,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 28,
            "docLength": null
          },
          {
            "id": "b6796701-60fe-6cae-5d47-ed10f3a1b544",
            "ancestors": [
              "fa8c8b25-b051-dba5-7f48-aef7c3bef095"
            ],
            "description": "Retrieves and returns a stored username as a string. This method provides access to the existing username value, allowing it to be utilized or displayed elsewhere in the program. The returned value is a snapshot of the current username.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string value representing the current username.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity ua = new UserActivity(\"John\", \"login\", new Date());\nSystem.out.println(ua.getUsername());",
              "description": ""
            },
            "name": "getUsername",
            "location": {
              "start": 23,
              "insert": 23,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "980555ce-05d6-1482-694b-4a1c37c60417",
            "ancestors": [
              "fa8c8b25-b051-dba5-7f48-aef7c3bef095"
            ],
            "description": "Returns a string value representing an unknown entity's \"action\". It retrieves and passes back the stored `action` state. This functionality serves to provide access to the current state of the action attribute.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string value representing an unknown entity's action.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity activity = new UserActivity(\"Alice\", \"purchase\", new Date());\nSystem.out.println(activity.getAction());",
              "description": ""
            },
            "name": "getAction",
            "location": {
              "start": 27,
              "insert": 27,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "8657ad16-f917-b5af-894f-5ff605f04395",
            "ancestors": [
              "fa8c8b25-b051-dba5-7f48-aef7c3bef095"
            ],
            "description": "Retrieves a date object and returns it. This method does not accept any parameters and simply provides access to an existing date instance stored as `date`. The returned date is presumably used elsewhere in the application or code.",
            "params": [],
            "returns": {
              "type_name": "Date",
              "description": "a `Date`.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity activity = new UserActivity(\"Alice\", \"login\", Date.from(Instant.now()));\n",
              "description": ""
            },
            "name": "getDate",
            "location": {
              "start": 31,
              "insert": 31,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "1deb6a76-a73a-c3a2-6641-6b637e637355",
            "ancestors": [
              "fa8c8b25-b051-dba5-7f48-aef7c3bef095"
            ],
            "description": "Combines user's username, a description of an action, and a date to create a formatted string. The date is formatted according to the `yyyy-MM-dd` pattern using the `SimpleDateFormat`. The resulting string represents a log entry with the given details.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string describing an action, including date and username.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "UserActivity userActivity = new UserActivity(\"Alice\", \"purchase\", Date.from(Instant.now()));\nSystem.out.println(userActivity.format());",
              "description": ""
            },
            "name": "format",
            "location": {
              "start": 35,
              "insert": 35,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "500f2c00-e402-e880-2f48-dbe5a06d011a",
            "ancestors": [],
            "description": "Represents individual users with attributes such as name, age, activity status, role, address, and a list of activities performed by that user. It encapsulates these properties and provides getter methods to access them.",
            "name": "User",
            "location": {
              "start": 41,
              "insert": 41,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 70,
            "docLength": null
          },
          {
            "id": "c1625d4c-a8bd-f889-664a-c2fd194cf2cf",
            "ancestors": [
              "500f2c00-e402-e880-2f48-dbe5a06d011a"
            ],
            "description": "Retrieves a string value representing a name and returns it. This operation is performed without modifying the original data. The returned value is a copy of the internal state of the object.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the object's name.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 25, true, UserRole.USER,\n        new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\nSystem.out.println(user.getName());",
              "description": ""
            },
            "name": "getName",
            "location": {
              "start": 58,
              "insert": 58,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "3c16c6b6-63ee-569c-e941-d05508de44b8",
            "ancestors": [
              "500f2c00-e402-e880-2f48-dbe5a06d011a"
            ],
            "description": "Returns an integer value representing the age of an entity or object. The age is stored in a variable named `age`. This read-only function allows external access to the internal state of the entity, providing its current age for further processing or display.",
            "params": [],
            "returns": {
              "type_name": "integer",
              "description": "an integer representing the age of a person.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "List<User> users = new ArrayList<>();\nUser user = new User(\"John\", 25, true, UserRole.USER,\n        new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>());\nSystem.out.println(user.getAge());",
              "description": ""
            },
            "name": "getAge",
            "location": {
              "start": 62,
              "insert": 62,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "b7ee6ec2-b98e-6195-b94b-da62ab0f8568",
            "ancestors": [
              "500f2c00-e402-e880-2f48-dbe5a06d011a"
            ],
            "description": "Returns a boolean indicating whether an object is currently active. This value is simply retrieved from the `active` field, implying that the activation status is stored elsewhere and not calculated within the function itself. The result determines whether the object's activity can be considered ongoing.",
            "params": [],
            "returns": {
              "type_name": "boolean",
              "description": "a boolean value indicating the current state of \"active\".",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User bob = new User(\"Bob\", 17, false, UserRole.USER,\n        new User.Address(\"456 Elm St\", \"Gotham\", \"USA\"), bobActivities);\nSystem.out.println(bob.isActive()); // Outputs: false",
              "description": ""
            },
            "name": "isActive",
            "location": {
              "start": 66,
              "insert": 66,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "e26af058-2e5f-04be-e04a-07bb72295bda",
            "ancestors": [
              "500f2c00-e402-e880-2f48-dbe5a06d011a"
            ],
            "description": "Retrieves and returns a `UserRole` object representing the current role. This function is likely part of an authentication or authorization system, allowing for the retrieval of user roles. The returned role can be used to determine access levels or permissions within the application.",
            "params": [],
            "returns": {
              "type_name": "UserRole",
              "description": "an instance of the `UserRole` class.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"John\", 25, true, UserRole.ADMIN, ...);\nUserRole role = user.getRole();\n",
              "description": ""
            },
            "name": "getRole",
            "location": {
              "start": 70,
              "insert": 70,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "aa68c60d-883a-f199-e248-847c0c92f7c3",
            "ancestors": [
              "500f2c00-e402-e880-2f48-dbe5a06d011a"
            ],
            "description": "Retrieves and returns the `address` object. This read-only operation provides access to the stored address information without modifying it. The obtained address data can then be used for further processing or display.",
            "params": [],
            "returns": {
              "type_name": "Address",
              "description": "an instance of the `Address` class.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address userAddress = new User(\"John\", 25, true, UserRole.ADMIN, new Address(\"123 Main St\", \"Metropolis\", \"USA\"), new ArrayList<>()).getAddress();\n",
              "description": ""
            },
            "name": "getAddress",
            "location": {
              "start": 74,
              "insert": 74,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "bcdf4f9a-4957-64a8-d44f-adbed5b09798",
            "ancestors": [
              "500f2c00-e402-e880-2f48-dbe5a06d011a"
            ],
            "description": "Returns a list of user activities, allowing access to the stored data. This method provides read-only access to the stored activities, enabling retrieval without modification or creation of new activities. The returned list represents the collection of user activities.",
            "params": [],
            "returns": {
              "type_name": "List",
              "description": "a list of `UserActivity` objects.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "User user = new User(\"Alice\", 25, true, UserRole.ADMIN,\n    new User.Address(\"123 Main St\", \"Metropolis\", \"USA\"), aliceActivities);\nList<UserActivity> activities = user.getActivities();\n",
              "description": ""
            },
            "name": "getActivities",
            "location": {
              "start": 78,
              "insert": 78,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "343f3f60-d6d4-5bb3-3b49-9bf66629cf9b",
            "ancestors": [
              "500f2c00-e402-e880-2f48-dbe5a06d011a"
            ],
            "description": "Is used to represent an address with street, city, and country details. It provides methods for getting these details and overrides the toString() method to provide a human-readable representation of the address.",
            "name": "Address",
            "location": {
              "start": 82,
              "insert": 82,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "class",
            "length": 28,
            "docLength": null
          },
          {
            "id": "612a25d3-f084-7585-e449-fcea9e88135b",
            "ancestors": [
              "500f2c00-e402-e880-2f48-dbe5a06d011a",
              "343f3f60-d6d4-5bb3-3b49-9bf66629cf9b"
            ],
            "description": "Returns a string value representing the street address. This method retrieves and provides access to the stored `street` variable. The returned value is simply a read-only copy of the internal state, allowing for inspection but not modification.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the street.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new Address(\"123 Main St\", \"Metropolis\", \"USA\");\nString street = address.getStreet();\nSystem.out.println(street);\n",
              "description": "\nThis will output: \n\"123 Main St\""
            },
            "name": "getStreet",
            "location": {
              "start": 93,
              "insert": 93,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "cff7c553-27d6-1096-094e-7311508c2f58",
            "ancestors": [
              "500f2c00-e402-e880-2f48-dbe5a06d011a",
              "343f3f60-d6d4-5bb3-3b49-9bf66629cf9b"
            ],
            "description": "Returns a string value representing the city. It retrieves and provides access to the previously stored or assigned city information. This simple getter method allows other parts of the program to retrieve the city data without modifying it.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string representing the city.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new Address(\"123 Main St\", \"New York City\", \"USA\");\nString city = address.getCity();\nSystem.out.println(city); // prints: New York City",
              "description": ""
            },
            "name": "getCity",
            "location": {
              "start": 97,
              "insert": 97,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "88cedf43-893c-3484-9643-ae5c2a24622a",
            "ancestors": [
              "500f2c00-e402-e880-2f48-dbe5a06d011a",
              "343f3f60-d6d4-5bb3-3b49-9bf66629cf9b"
            ],
            "description": "Retrieves and returns the value of the `country` variable. This allows external access to the stored country information, enabling its use or manipulation elsewhere in the program. The returned value is a string representing the country name.",
            "params": [],
            "returns": {
              "type_name": "String",
              "description": "a string value representing a country.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new Address(\"123 Main St\", \"New York\", \"USA\");\nString country = address.getCountry();\n",
              "description": ""
            },
            "name": "getCountry",
            "location": {
              "start": 101,
              "insert": 101,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 3,
            "docLength": null
          },
          {
            "id": "4599f3fb-f56d-c5ab-df41-3ff249d242a7",
            "ancestors": [
              "500f2c00-e402-e880-2f48-dbe5a06d011a",
              "343f3f60-d6d4-5bb3-3b49-9bf66629cf9b"
            ],
            "description": "Returns a string representation of an object, combining three strings: `street`, `city`, and `country`. This concatenated string is formatted with commas separating each part. The resulting string provides a human-readable summary of the address.",
            "params": [],
            "returns": {
              "type_name": "string",
              "description": "a string combining street, city, and country information.",
              "complex_type": false
            },
            "usage": {
              "language": "java",
              "code": "Address address = new Address(\"123 Main St\", \"Metropolis\", \"USA\");\nSystem.out.println(address.toString());\n",
              "description": "\nThis will print: \n- 123 Main St, Metropolis, USA"
            },
            "name": "toString",
            "location": {
              "start": 105,
              "insert": 105,
              "offset": " ",
              "indent": 8,
              "comment": null
            },
            "item_type": "method",
            "length": 4,
            "docLength": null
          },
          {
            "id": "c0d81cbb-db94-b295-fb41-68d4bc8bf98a",
            "ancestors": [],
            "description": "Is designed to generate activity reports for users based on their age and activity filters. It uses Java Stream API to process user data and returns a list of formatted report strings. The main method demonstrates the usage of this class with sample user data.",
            "name": "UserActivityReport",
            "location": {
              "start": 112,
              "insert": 112,
              "offset": " ",
              "indent": 0,
              "comment": null
            },
            "item_type": "class",
            "length": 55,
            "docLength": null
          },
          {
            "id": "b196b868-1025-979d-2441-ae22f880735c",
            "ancestors": [
              "c0d81cbb-db94-b295-fb41-68d4bc8bf98a"
            ],
            "description": "Generates a report containing user activity data for users meeting specific criteria: age greater than or equal to `minAge`, and optionally including inactive users if `includeInactive` is `true`. Activities are filtered using the provided `activityFilter` predicate.",
            "params": [
              {
                "name": "users",
                "type_name": "List<User>",
                "description": "collection of users from which to generate the activity report, filtering and processing their associated user activities based on specified criteria.\n\nStreamed, filtered by age and activity status; contains user objects having an \"age\" attribute and \"getActivities()\" method that returns a list of activities.",
                "complex_type": true
              },
              {
                "name": "minAge",
                "type_name": "int",
                "description": "minimum age required for a user to be included in the report, with only users whose age is greater than or equal to this value being considered.",
                "complex_type": false
              },
              {
                "name": "includeInactive",
                "type_name": "boolean",
                "description": "condition for including inactive users in the report generation process.",
                "complex_type": false
              },
              {
                "name": "activityFilter",
                "type_name": "Predicate<UserActivity>",
                "description": "predicate that filters user activities based on specific criteria before formatting and collecting them into a list.\n\nPredicate - filters UserActivity instances based on an unspecified condition. Its main property is its predicate logic that determines whether or not a specific activity meets the desired criteria.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "ListString",
              "description": "a list of formatted user reports.\n\nA list of strings is returned, where each string represents an activity report for a user. The report includes information about the user and their active activities that meet the specified conditions.",
              "complex_type": true
            },
            "name": "generateUserActivityReport",
            "location": {
              "start": 114,
              "insert": 114,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 17,
            "docLength": null
          },
          {
            "id": "b5c43d3f-0f36-d098-b841-5ae424de8e16",
            "ancestors": [
              "c0d81cbb-db94-b295-fb41-68d4bc8bf98a"
            ],
            "description": "Constructs a string report for a user, including their name, age, status, role, address, and a list of activities they have performed. The report is formatted with newline characters to represent each section and activity.",
            "params": [
              {
                "name": "user",
                "type_name": "User",
                "description": "user's information, which is then used to populate various fields and attributes within the formatted report string.\n\n- The user has a `name`, which is extracted and appended to the string builder.\n- The user's `age` is also extracted and appended.\n- The user's status depends on whether it is `active` or not, with corresponding strings \"Active\" or \"Inactive\".\n- The user has a `role` that is appended to the string builder.\n- The user's `address` is extracted and appended.",
                "complex_type": true
              },
              {
                "name": "activities",
                "type_name": "List<String>",
                "description": "list of strings that are appended to the report as a series of activities performed by the user, each preceded by an em dash and a line break.\n\nForeachable, containing Strings, unordered.",
                "complex_type": true
              }
            ],
            "returns": {
              "type_name": "String",
              "description": "a formatted string representing user information and their activities.",
              "complex_type": false
            },
            "name": "formatUserReport",
            "location": {
              "start": 132,
              "insert": 132,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 11,
            "docLength": null
          },
          {
            "id": "25a08c39-6e41-dfb0-7b43-b1e088b26b76",
            "ancestors": [
              "c0d81cbb-db94-b295-fb41-68d4bc8bf98a"
            ],
            "description": "Generates a user activity report by creating and populating a list of users with their activities. It then filters out logout events from non-minors (older than 18) and prints the resulting report.",
            "params": [
              {
                "name": "args",
                "type_name": "String[]",
                "description": "command-line arguments passed to the main class when it is run, but it is not used in this specific code snippet.\n\nParameterized array of strings representing command-line arguments. It contains no specific values or information for this function's execution.",
                "complex_type": true
              }
            ],
            "name": "main",
            "location": {
              "start": 144,
              "insert": 144,
              "offset": " ",
              "indent": 4,
              "comment": null
            },
            "item_type": "method",
            "length": 22,
            "docLength": null
          }
        ]
      }
    }
  }
]